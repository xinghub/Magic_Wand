#include "nnom.h"

// New comment
/* Weights, bias and Q format */
#define TENSOR_CONV1D_KERNEL_0 {-18, 76, 81, 61, -27, 72, 43, 43, 65, -24, 6, -66, 23, 43, -2, 71, 44, -82, 10, -33, 62, -79, 26, 44, -67, -45, 35, -29, -66, -69, 31, 28, 17, -67, -66, 57, -47, 6, -32, 33, -36, -15, 44, 4, 48, 62, 36, -66, 48, 67, -18, 56, 32, -62, 36, 100, 90, -35, 84, 44, 34, 101, -28, -45, 9, -29, 39, 22, -41, -24, -19, -88, 21, 26, 73, 91, -37, 35, 67, -33, 29, 85, -4, -3, 39, -45, 32, -18, 49, -71, 66, -78, -32, -2, -86, -40, -44, -93, 58, 26, -2, -61, 49, -37, -87, 43, 62, -15, 9, -1, -8, 15, -63, 31, 76, 37, 6, -18, -7, -83, 49, 52, -78, -30, -59, -87, -30, 3, 37, -72, 20, 7, -42, -11, 14, 68, 29, 88, -38, 56, -5, 39, 32, 95, -55, -32, -59, -51, 3, 27, -78, 62, -36, -71, -41, 63, -82, -81, -13, -60, -48, 52, -21, 50, 25, 35, -40, 71, -6, -2, -26, -1, -36, -94, 12, 37, -63, 20, 36, -7, 80, -15, 19, 76, -38, 85, 0, -28, 5, -33, 52, 10, 24, 17, 35, -46, 50, 13, -1, 6, 66, -20, 54, 30, 20, -5, 52, -8, -54, 50, -58, -25, -13, -5, -14, 26, -53, 12, -37, -61, -39, 11, -75, 1, 33, 19, 12, 55, 56, 38, 55, 37, -31, 43, 54, -36, -29, -15, -86, -39, 63, -83, 24, 75, 42, -20, 29, -18, -35, 85, 1, -17, -4, 87, -12, -93, 51, -67, -82, 45, 45, -76, 66, -60, -42, -37, -23, -57, 53, -41}

#define TENSOR_CONV1D_KERNEL_0_DEC_BITS {8}

#define TENSOR_CONV1D_BIAS_0 {13, 37, 24, -1, 89, 72, 68, -46, -52, 41, 67, -41, -34, -33, -58, 61, -16, 78, -9, -3, -35, 8, 107, -9, 62, 2, 75, -19, 13, 20}

#define TENSOR_CONV1D_BIAS_0_DEC_BITS {9}

#define CONV1D_BIAS_LSHIFT {3}

#define CONV1D_OUTPUT_RSHIFT {9}

#define TENSOR_CONV1D_1_KERNEL_0 {-45, -17, 3, -40, 52, 35, 1, 6, -42, 15, 50, 17, 9, -36, -14, -44, 25, 31, -4, 37, -48, 3, 17, 33, -55, -41, 62, -30, -35, -46, -30, 72, -8, -12, 44, 63, -2, 46, -41, -12, 16, -7, -21, -9, -43, -1, -19, -44, -40, 16, -44, -6, 28, 60, -27, 28, 16, 17, -28, 51, -51, 84, -31, -33, 67, 63, 0, 4, -43, 35, 61, 33, -39, 43, -65, -8, 3, 9, -45, 39, -37, -67, -2, -56, 10, -26, -6, -5, -12, 46, 5, 10, -10, 17, -23, -15, -11, -11, 5, -14, -37, 61, 51, 32, -21, 30, 58, -55, -30, 35, 37, 43, -47, 25, 18, -2, 15, 40, -18, -18, -23, 4, -10, 44, 19, 3, 0, 24, -43, -13, -56, 60, -58, 81, 40, -26, 57, 38, 13, 54, -49, -9, -58, 27, 24, -47, -17, -9, -46, 45, -29, 15, 7, 15, -56, -22, -34, 26, -26, -20, -40, 69, -11, 56, 1, -52, -20, -22, -57, 74, -15, -30, -20, -43, -10, -23, -38, 40, 53, 68, -32, 24, -2, 3, 22, 17, -43, 31, -6, 51, 45, -13, -4, 26, -49, 21, -36, 48, 15, 5, 21, 29, 24, 1, -18, 35, 52, -9, -10, -27, 29, 48, -12, 36, 52, 6, 12, 21, -12, 51, 72, 38, 20, 63, -44, -44, 1, 43, -42, 67, 34, -71, -4, 18, 1, -24, 18, -37, -25, 9, -52, -8, 28, 28, -4, 49, -69, 45, 46, 45, 25, 63, 52, 66, -4, -30, 62, -27, -27, -10, 46, -34, 3, 56, 13, 1, -18, -34, 18, 66, -10, -15, 36, 29, -32, 24, 31, -54, -30, -64, 31, -26, -8, 5, 13, -14, 13, 90, 12, -33, -88, -14, -21, 17, 65, -34, 36, -36, 72, 18, -25, -54, 31, 26, 39, -10, 6, 50, 32, 21, -28, -36, -5, -5, 7, -45, 61, 73, 57, -54, -62, 47, 2, -12, 70, -6, -6, -2, 45, 33, 1, -37, -3, 66, -36, -55, 16, -45, -53, 19, 68, -17, 8, -65, 36, -2, 27, -16, 26, -53, 8, 64, 2, 31, 55, 5, 4, 2, -16, 48, -18, 58, 12, -7, -32, -53, 0, 54, -37, -67, -33, 59, -8, 6, -17, 18, 3, -32, -53, -37, 5, -39, -23, 16, 81, 16, -58, -38, 52, 67, 13, 30, -17, 29, -19, -35, -62, 5, -27, 19, -17, 38, 3, 26, 39, 4, -24, 32, 8, 57, -15, 16, -52, -50, 14, 38, -40, 3, 63, 48, 4, -13, -8, -21, 14, -55, 49, 1, 44, 6, 18, -10, 11, -22, 8, 31, 62, 7, -4, 20, 55, 50, -21, -26, -27, 32, 33, 37, 40, 28, 22, 55, -74, 7, -2, 41, -21, 21, 62, 4, 13, 52, 25, -6, 5, 24, -7, -53, 3, 60, 21, 10, 27, -49, -64, -25, 16, -14, -4, 33, 37, 34, -26, 22, -28, 81, 23, 19, 40, 93, 46, 77, 33, 22, 17, -11, -27, -39, 31, 22, 1, -41, 8, -66, 26, 0, 50, 42, -24, -70, -60, 18, -54, 34, 29, -6, 9, 33, -14, 66, 63, -18, 50, -40, -9, -55, -57, -16, -43, -20, 55, -32, -48, -4, -80, 24, 72, 74, -70, 25, 54, 22, -22, 21, 38, -39, -4, 14, -49, -56, 3, -69, -9, 31, -39, 10, 43, -5, -9, 29, -13, -1, 68, 28, 64, 8, 8, 26, 54, 12, 26, -36, 26, 8, 3, -44, -66, -25, -34, 26, 10, 3, 18, -53, -25, 62, -20, 12, -25, 43, 34, -46, 52, -12, 67, 28, -35, 16, -58, -23, 13, 2, 66, -1, -13, -54, -21, -20, -44, -72, 28, -74, 31, -2, 27, 32, -1, 72, 36, -64, -28, -50, 9, 63, 25, 1, 58, -85, -31, 26, 63, -65, 0, 6, 22, -23, -13, 10, 63, -6, 56, -9, 8, 3, -34, 42, -26, 58, 63, -61, 61, 11, 46, 46, -2, 38, -14, 19, -40, -23, 67, -18, 41, 38, 5, 1, -11, -19, 49, 65, -21, -15, 5, -67, -19, 13, 59, 23, -3, 0, -1, 30, 36, 11, 1, 60, -10, 44, -22, -24, 39, -46, -5, 44, -22, -41, 77, 19, -33, -27, -41, 38, -31, 36, 41, 2, 27, 12, 10, -49, 43, 55, 69, -1, 56, 14, 32, 14, 61, 49, -66, 58, -35, -34, -26, -31, -30, 20, 20, -42, -37, -5, 40, 36, 34, -45, 61, -34, -9, -29, -14, 10, -10, -19, 39, 23, -27, 56, 52, -15, -9, 70, -17, -24, -63, -36, -5, 44, -17, -16, -30, -21, 7, 19, 19, -59, 22, 16, -21, 25, 42, 0, -65, -15, 49, -7, 45, 75, -16, 19, -19, 48, -61, -34, -23, 30, 15, 70, -19, 62, 58, 66, -9, 70, -37, -70, 69, -21, 4, 66, -18, 34, -83, -42, -25, -51, 20, 6, 29, 24, 47, -4, -17, 50, -3, 34, 42, 29, 18, 44, 42, 29, -20, 36, 39, 23, -9, 10, -25, -38, -24, 56, -10, 6, -36, -53, 35, 28, 54, 57, -45, 8, 26, 41, -17, -15, 50, 48, -43, 21, -50, 56, 48, 29, -40, 20, -34, -1, 47, 33, -29, 46, -33, 17, -50, 51, -37, 24, -1, 48, 15, 6, -57, -60, -16, -11, 5, 42, 12, 49, -56, 19, 44, 70, -15, 23, 29, 2, -15, -31, 4, -44, -56, 16, 28, 56, -16, 69, 22, 43, 17, -24, -22, 37, -8, -8, -6, -34, -59, -44, 39, -65, -7, -44, -58, 6, -60, 38, 29, 35, 41, -21, 17, -25, 40, -51, 61, 25, 21, -21, -36, -5, 21, 36, 55, -50, -20, 34, -9, 5, 28, -17, -22, 47, -62, -47, 43, -44, -24, 39, -21, 27, -22, -32, 41, -24, 63, -58, -17, -2, -76, 2, -6, 18, 36, -57, -88, -16, -45, 23, -2, 5, -57, 15, -44, 2, -44, 54, -63, 1, 20, -22, -69, -32, -21, -20, 34, 41, -8, -38, 82, 9, 5, -33, -36, 28, 60, -2, -22, -9, 37, 3, -15, 24, -59, 81, 15, -57, -31, 41, -43, 51, 24, 24, 47, 51, -61, -56, 40, 12, 74, 13, -28, 27, -11, -22, 77, 48, 28, -15, 32, -24, 5, 67, 44, 62, 17, -39, 72, -29, 55, 37, 8, -49, 2, 43, 30, -44, 6, 69, 46, 7, -28, -3, -43, 4, 66, 10, 3, -7, 37, 42, 16, 41, -46, 45, 24, 26, 17, -24, -14, -37, 1, 42, -21, 3, -29, -10, 7, -21, 49, 82, 45, 23, 3, 53, 20, -31, -2, 51, 8, 28, -9, -31, -16, 1, -37, 12, 6, 61, 38, -29, -12, -11, -33, 21, 31, 79, -18, 6, 64, 77, 21, -39, 34, 56, 31, 6, -33, 65, 41, 56, -11, -38, 23, 65, -56, 41, 18, 42, 18, -14, 64, -34, -53, -32, 24, 77, -17, -20, -28, 81, 17, 6, 50, 42, 47, 4, 36, 81, -45, 34, 61, 39, 6, 24, -43, 4, -38, 15, 16, 44, 49, -38, -47, -8, 20, -10, 0, 4, -61, -14, -35, -37, 75, -20, 20, -63, 5, 29, -33, -20, -24, 1, -50, 7, -25, -3, 23, -2, -60, 4, 58, 17, 40, -49, 41, -39, 4, 56, -54, 53, 9, -29, 69, 24, 44, 17, 13, 31, -48, -48, -49, -47, -1, -9, 41, -39, -52, -25, -70, 63, 44, -67, 23, -9, 43, -8, 53, -10, -21, -15, -19, -26, 59, 25, 77, -64, -48, -5, -8, 2, -71, -13, 11, -7, 22, 52, -53, -40, -18, 45, 67, -48, -10, 17, -58, 37, 16, -18, -57, -19, 54, 24, 11, -25, -55, 10, 33, -47, 30, 16, 29, -33, 69, -45, 10, -13, -53, -48, -50, 42, -9, 41, 82, 42, -20, 34, -25, 14, -7, -22, -10, 10, 17, -60, -54, 52, -59, -53, 12, -60, 19, -3, 35, -61, 71, 66, -7, -10, 23, -28, -16, 1, 14, 12, 44, 49, 75, 2, -42, -28, 35, -12, -1, 43, -16, 2, -8, 3, -25, -28, -30, -63, 12, 27, 28, 53, -42, 41, -28, 15, -2, 52, -16, -20, -39, 52, 12, 40}

#define TENSOR_CONV1D_1_KERNEL_0_DEC_BITS {8}

#define TENSOR_CONV1D_1_BIAS_0 {53, -32, 32, 56, -33, -2, 60, -5, -42, -29, 39, 56, 70, 75, 4}

#define TENSOR_CONV1D_1_BIAS_0_DEC_BITS {9}

#define CONV1D_1_BIAS_LSHIFT {2}

#define CONV1D_1_OUTPUT_RSHIFT {9}

#define TENSOR_DENSE_KERNEL_0 {-14, -17, 11, 15, -31, -32, 40, -37, 41, -4, 30, -38, -28, -22, 3, 11, -14, -47, 3, -4, -20, -14, 23, 15, -8, 15, -11, -4, -6, -16, -6, -19, -3, -54, 34, 1, -43, -12, 54, 0, -4, -30, 30, 36, -65, -14, -48, -58, -78, 19, 22, -13, -33, -21, -6, -10, -14, -33, 9, -15, -29, 35, -30, -45, 0, -46, 53, -16, -58, -39, -17, -18, -20, -38, 19, 44, -30, -33, 36, 31, -32, -18, -21, 4, 2, -16, 5, -36, 63, 9, -59, -56, 17, 6, -7, -19, -44, 0, -34, -18, -27, -28, 5, -2, 26, -54, -10, -28, -29, 6, -9, 22, 29, 6, -57, -11, -18, 14, -14, -14, 68, -24, -35, -12, -15, -24, -54, -39, -3, -29, -10, 26, 3, -10, -11, -40, 12, -26, -31, 36, -35, -17, -17, -22, 57, -69, 25, -46, 12, -35, 0, -32, 22, 20, 26, 1, -20, 12, -30, -15, 19, -56, -51, 32, 30, 15, -18, -11, -4, 56, 18, -4, -22, -9, 2, -19, 20, -18, 9, -8, -32, -31, -6, -32, -14, -3, 0, -3, -49, 4, -29, -59, 45, 7, 11, -40, -33, -43, 36, -7, 34, -12, 44, -18, -29, -32, -6, -67, -29, 31, -47, 2, -20, 10, -36, 30, -6, -37, -1, -11, -28, 23, 17, -11, -20, 16, -5, 35, 16, -9, 11, 25, -43, 18, 45, -33, 38, 9, 40, 13, -5, -35, -2, 3, -29, -53, 13, -41, -12, 5, 56, -8, -12, -35, 5, -1, -8, -11, 12, 15, -8, -22, 1, -36, -22, -4, 11, -41, 2, 37, -12, 4, -16, -41, -2, -6, -6, 7, -2, 16, -28, -26, -29, -11, -20, -4, 11, 5, -15, 12, -9, -33, 5, -22, 0, 11, 26, -4, -54, -38, 40, 34, -29, -50, 13, -13, 21, 24, 20, -18, 34, 19, -25, -61, 26, -9, -25, -37, -20, 31, -12, 29, -28, 23, -21, 23, -5, 24, 0, 6, -48, 3, 17, -9, -20, 11, 12, 24, -35, 4, 1, -3, -17, 14, 36, -28, -52, 19, -40, 18, 34, 29, 4, -35, 1, -23, 31, 3, -48, -34, 4, -1, -22, -41, 10, -15, -28, -22, -20, -67, -30, 12, -14, 5, 9, 3, -36, 39, -8, -33, 29, 26, 22, -9, 42, 14, -12, -28, 25, -19, -40, -33, 20, 39, -51, -4, -40, 9, 36, 34, 34, -7, 13, 34, -60, 6, 48, -43, 39, -12, -19, -17, 4, 10, -24, 36, -1, -11, -28, 4, -9, 1, -39, -2, -35, -57, -21, -6, -9, 16, -11, -56, -21, 18, -41, 33, -23, -21, 26, -4, -23, 8, 6, 21, 30, -31, 3, -37, 16, -13, -34, -19, 23, -42, -37, 21, 23, -32, 42, 30, -29, 22, 8, 29, 6, 6, 12, 28, -27, -21, -31, 4, -62, -32, -20, 23, 7, -30, 19, 19, 7, -40, -14, -1, -55, -3, 37, 47, -54, -48, 37, 13, -28, -19, -6, -11, 27, 27, 13, -7, 15, 15, -12, -4, -18, -5, 12, -17, 37, 6, 0, -3, -37, -50, 51, -21, -54, 15, -10, 22, -31, 30, 25, -41, -48, -37, -57, -39, -39, -22, -34, 44, 0, -6, -25, 30, 24, 32, 22, 2, -8, 42, -27, 23, -49, 1, 9, 30, -21, 43, 27, -9, 15, -28, -15, -3, 7, -17, 5, -27, -40, -40, 36, -46, -10, 14, -14, -41, -13, -28, -24, -3, -8, 8, -44, 13, -52, 23, -13, -46, -48, -1, 9, -61, 9, -4, 22, -46, -41, 33, -14, 31, 21, 42, -24, -44, -11, -10, -35, 27, 5, -21, -49, -55, 32, -14, -63, -11, -48, -20, 2, 0, 12, 9, -5, -2, -39, -14, -22, -51, -4, -6, 51, -3, 36, -14, -24, 22, -30, 7, -65, -3, 2, -7, -23, -44, 44, -45, 19, 25, 48, 15, 6, -45, -14, -15, 15, 9, 2, -3, -18, 47, -20, -67, -24, 12, 0, -24, -18, -10, 8, -16, -15, 0, 35, 21, 5, -68, -5, 16, -10, 39, 17, 34, 14, -61, 1, 10, -7, 42, -51, -32, -20, 9, -34, -20, 29, 0, 16, -2, -29, -27, -4, -42, 22, -15, -23, 10, 4, 11, -25, 35, -21, -57, -40, -24, 23, 28, 28, -45, 0, -7, -3, -57, -43, 10, 8, -10, 41, 24, 4, -2, 17, -60, -53, -5, -2, 39, 2, -21, -54, -25, -28, -23, 9, -51, -49, 2, 13, 14, 10, -53, -25, -61, 12, -3, -21, -40, -7, -5, -16, -32, -6, 31, -3, 36, -13, 9, -12, -62, 5, -41, 8, 3, 18, 10, -13, -30, -38, 2, -50, -20, -2, -14, 4, -11, 20, 33, 12, 3, -5, 1, -9, 18, -43, 27, -30, 36, -44, 36, 16, -14, -4, -39, -36, -1, -54, 10, -11, 5, 7, -43, -25, -39, -23, -17, -8, -34, -22, 19, 4, -12, -27, -17, -26, 12, 3, -14, -37, -4, -27, 1, -22, -66, 11, -14, -12, -41, -65, -36, -15, 35, -22, 37, -25, -3, 1, 3, -38, 5, -15, -1, -17, -12, 1, 28, -27, 19, -43, -55, -42, -17, 45, 3, 14, -54, -47, 50, 15, -15, 8, -3, -9, 0, 1, 9, -19, -41, 10, -11, 16, 38, -31, -62, -49, -2, 9, -25, -5, 33, -5, -7, 30, -15, 26, -19, 34, 10, 11, -47, -25, -9, -8, -7, -29, -6, -10, 7, -5, -44, -33, 1, -16, -9, 20, 30, -30, -20, -4, 54, 19, 44, -10, 35, -51, -6, 3, -42, 44, 38, -28, 24, -19, -32, -36, 18, -29, -10, 52, 3, -1, -25, 45, -53, -29, -5, -61, 19, -27, 62, -48, 25, 5, -1, 17, -21, -22, 45, 38, -43, 13, -17, -10, -2, -3, 34, 2, 24, 19, 9, -13, 20, 7, 5, -1, 47, -30, -17, -13, -27, -71, 6, -52, 20, 23, 22, 11, 38, 37, -52, -24, 17, 22, -60, 16, 37, -14, -27, 18, -27, -25, -25, -25, 11, -5, -46, -15, -6, 33, 30, -47, 23, 28, -50, -11, -54, 14, -18, 3, 16, 32, -17, -44, 7, 7, -17, -6, 0, 18, 23, -23, -18, -60, 20, -38, 15, -4, -45, -1, 35, 38, -2, 13, -52, 27, -83, -17, -55, 40, -32, 33, 7, -7, -32, -49, -3, -2, 19, -24, 23, 39, -38, -40, 1, -11, 2, -38, 10, -59, -36, -60, -5, -1, -29, -8, 8, -2, -13, 26, 24, -19, -43, 48, 30, -28, -40, -16, 7, -16, 49, -16, -28, -46, -32, -55, 25, 5, -13, 21, -5, 20, -30, -59, -18, -30, -22, -40, -49, 14, 1, 5, 6, -5, -20, -40, 9, 29, 39, 9, -3, -59, 17, -10, 23, -15, -25, -5, 19, 10, -8, -33, -32, 22, -28, -2, -3, 15, -32, -23, -15, 7, -10, -24, -13, -44, -5, 37, -44, 17, -53, -20, 43, -33, 50, -46, -62, -14, -6, -20, 6, 14, 27, -8, -20, 17, -48, -58, -3, -20, -13, 13, 2, 1, -36, 34, -22, -33, -20, 43, 0, -35, -36, 4, -9, -20, 9, 26, -24, -22, 5, -26, 19, 15, -54, 40, -12, -27, 25, 7, -17, 12, -24, 10, -18, 5, -52, -60, -41, -21, 25, 1, -30, 25, -13, 17, 25, -37, 27, -13, -31, -15, -48, -31, 21, -36, 1, -15, 15, -6, 10, -8, 22, 25, -36, -14, -18, 52, 1, -23, -16, -36, 23, -23, -9, 7, 18, 2, -15, -24, 3, -22, 21, 17, 3, 0, 42, -67, -13, 2, -12, -38, 52, -16, -19, -58, -17, 18, -46, -47, 10, -31, -9, -19, 32, -27, -14, -14, -40, 6, 0, -47, 16, 36, 3, -11, -12, 6, 11, 24, 22, -20, 1, 27, 17, -40, -21, 10, -47, -27, -1, -15, -6, -4, -5, 14, 11, -21, 2, -1, -18, 13, -17, -12, 12, -24, 1, 29, 6, 7, -35, -11, 4, -41, -55, -35, 13, -12, 27, 18, -29, -14, -14, 4, -29, -17, 9, -38, 35, -2, 20, -42, -58, -15, 12, -23, 16, 7, -38, -51, 3, -50, 10, 13, -20, 3, 8, -13, 13, 0, -22, 21, -26, 3, 0, 24, 38, 38, -3, 19, 22, -3, -17, -37, -9, -41, 36, 32, -13, 19, -32, -22, 22, -18, 12, -8, -18, -27, -41, -29, 42, -44, 8, -30, -40, 11, 18, 5, -13, 32, -29, 12, -30, -2, 13, -6, 21, -45, -11, -32, 39, -47, -4, -19, 11, -17, -19, 11, 16, 41, 14, -13, 25, 5, -3, -20, 18, -7, -27, 4, 26, 8, 40, -23, -31, -10, 16, -43, 7, 52, -44, 18, 4, 14, 11, -10, -50, -12, 22, -14, -10, -26, -22, 10, -6, 16, 10, -33, -13, 26, -9, -38, -20, 3, 21, -12, 31, 8, 6, 5, -8, -12, -34, 27, -15, -51, 20, 19, -39, 29, -42, 38, -5, 24, -2, -20, 1, 25, -1, 12, -4, -19, 14, 49, -24, 47, -41, -11, 4, 21, -3, -52, -32, 13, 24, -26, 12, -66, 6, -53, 0, -30, -32, -24, 18, 15, 41, 24, -2, -11, -46, -41, -12, 9, -4, 29, 12, 22, -15, 29, -34, 14, 6, -20, 37, 0, -16, -20, -27, -51, 18, -2, -3, 29, -57, 12, -19, 20, -18, 9, -28, -35, -16, 12, -10, 23, 44, 30, 29, -33, -5, -19, 1, -69, 8, -17, 0, 9, 5, -1, 4, -23, -1, 20, 13, -5, -1, -5, 21, -13, -26, 2, -35, 40, 5, -6, 6, 8, 9, 15, 22, -37, 47, -23, -16, 3, -4, 36, -1, -38, 10, 14, -58, -39, -25, -17, -19, -27, -14, 11, -31, -8, 38, -1, 24, -17, 5, -60, 8, 42, -52, -36, 21, 11, -12, 9, -16, -44, -12, -16, -13, 16, -31, 8, -8, 7, -1, 4, 30, -9, -6, 3, 13, 41, -32, -5, 7, 20, 46, -79, -30, -3, -18, 7, 36, 5, -23, -22, -43, -33, -76, 11, 37, 33, -36, -9, -4, -2, -25, 32, 12, 8, 2, 27, 18, 38, 15, -52, 6, 39, -10, 46, 21, 49, -4, -22, -20, -22, -12, -22, -27, -32, 18, 14, -33, -30, -32, -9, 0, -16, 10, 28, 49, -31, 28, 15, -30, 1, -59, -20, 16, 20, -29, 7, 5, 18, 34, 29, 18, -5, 7, 52, 12, 14, 46, -10, 3, 14, -28, -11, -12, -38, -18, -17, -1, 25, -17, 14, -27, 38, 45, -2, -17, -28, -8, -40, -10, 4, 2, 7, -61, -38, 4, 23, -22, -52, 18, 39, 3, -14, -15, 25, -3, 10, -36, -9, -26, 12, -24, 11, 1, -15, -44, 16, -22, -38, 45, 6, 30, -43, 13, -21, 11, 39, 37, -3, -5, -6, 30, 32, 25, 33, -1, 2, -53, -42, 9, -35, 41, -28, 24, -1, -6, -3, -2, -18, -35, 46, -29, 23, 0, -35, -27, -21, -24, 1, -15, -7, 20, 50, -34, 38, 1, 5, -35, 37, 7, 26, 2, 38, -14, -52, 0, -68, 58, -1, 54, 57, 9, -6, -4, -39, -6, -13, -46, 46, 24, -27, 29, 27, 22, 2, -13, -7, 17, -14, 4, -19, 13, 35, 27, -62, 19, -2, 9, -18, -36, 5, 1, 34, -47, -45, -11, -17, 17, -8, -7, -4, 3, -47, -19, -68, -12, -22, -10, 27, 37, 27, 25, 8, -17, -27, 1, 0, 4, 8, 23, -38, -39, -6, -34, 26, -39, 1, 27, -25, -21, -13, 7, 3, 9, 0, -4, -21, -2, -42, -3, -40, -24, -38, -4, -9, -43, 46, -23, -11, -25, -12, -14, -37, -6, 57, -32, 57, -40, -20, -6, -16, 3, 13, 7, 6, 0, -5, -9, -71, 33, 8, -33, -30, 26, -14, 11, -6, -25, -4, 8, 13, -28, -13, 35, 19, -36, -29, 8, -13, -19, -1, -18, 32, -1, -1, -12, -21, -31, -1, 0, 4, -23, 48, 14, -39, -54, -34, -4, -7, 35, 2, 49, -23, 0, 1, 6, 29, -8, -42, -9, 8, -63, -40, -29, 47, -25, 40, -46, -15, -59, -17, -8, -19, 17, 44, -33, 59, -13, -9, -9, -2, -9, 13, -8, -5, -9, -5, -36, 0, -32, 2, -15, -30, -56, -15, -50, -41, -11, 43, -9, 37, 7, -39, 46, 29, 18, 36, -51, -33, -69, -18, -4, -18, -29, 12, -57, 29, -59, -10, 18, 14, 42, 12, 5, -21, -4, 12, 49, -20, -73, 18, 27, -75, -18, -40, 17, -8, -41, 33, -48, -2, 24, 71, 27, 19, 5, 0, -7, -52, 4, 50, 44, 60, -40, 41, -38, -25, -31, -23, 30, -38, -38, 28, -52, -21, -27, 22, 34, 27, -35, -13, 21, -14, 25, -42, -47, 31, 33, -1, 20, 16, -53, -6, 50, -40, -55, -18, 12, -23, -24, 36, -24, -65, 53, -22, -12, -3, -66, 59, -17, -7, -9, -35, -27, 31, -11, -17, -27, -9, 13, -33, 56, -20, 5, -39, 38, 10, 24, 58, 32, -44, 35, 30, -33, -11, -44, -40, -6, -28, -16, -35, -2, 28, -32, 22, -27, 46, 21, -14, 15, -26, -10, -13, 21, -29, -19, 12, -29, -27, 23, 5, -27, 3, -3, -35, 11, 34, -19, 8, -35, -12, 34, -16, -39, -45, -6, -31, -6, -19, -20, -41, -31, -62, 4, 35, 15, -56, 18, 56, -4, -3, -31, -38, 34, -4, -34, -25, -24, -35, 10, 25, -35, 25, 11, -25, 14, -34, 29, -25, 45, 21, -14, 25, 3, 5, 32, -14, -74, 19, 3, -19, -24, 26, -47, 32, -11, 19, 17, 22, 36, -38, -20, -12, -41, -25, 23, -19, -36, -13, 21, 44, -16, 31, -7, -12, -7, 37, 18, -30, 28, 9, 9, -48, -1, 5, -22, -4, 9, -15, -17, 24, -62, 30, 10, -16, 39, -18, 20, 30, -4, -11, -15, -23, -17, 18, -75, -17, 20, -2, -20, -18, -13, 50, -17, 32, 20, 1, -41, 15, 17, -30, -15, 37, -53, -38, -12, 21, -27, 0, -48, 45, 2, 42, -3, -30, 1, 20, 20, -41, 10, 10, 0, -4, 24, 28, -25, -43, -6, -1, -6, -25, -45, -39, 1, -7, 40, -2, 9, 2, 36, 26, -64, 2, -13, 0, -47, 40, 46, -32, -47, 28, 19, 3, 60, 0, 3, -8, -27, 38, -37, -26, 1, 7, -30, 1, 2, -46, -2, 13, -1, -28, 4, -54, 22, 7, -21, 18, -34, -23, -10, -51, 49, -26, 24, -1, -49, -44, -47, 21, 28, -31, -11, 25, 45, -29, -48, 5, 11, 13, 18, -11, 28, -13, 24, -1, -43, 1, -13, 5, -11, 8, -32, 53, 35, -39, 0, 18, -57, 24, 3, 14, 12, -41, 38, 21, -16, -22, 12, -14, -39, 2, -29, -10, 19, 46, -29, 26, 61, -13, -5, -20, -16, -48, -8, -41, -60, -19, 10, -27, 11, 42, -30, 17, 16, 52, 4, 36, -9, 40, 8, 0, -29, 39, -16, -20, -17, -5, -50, 13, 6, 7, -39, 19, -41, -20, -5, -35, -36, 25, 32, -6, 10, 10, -23, -12, -44, -54, 1, -16, -29, 23, -23, 32, -30, -13, -30, 24, -3, -33, 43, -42, -42, 26, 4, 38, -48, 11, -5, -28, -33, 1, -48, 41, -6, 0, -19, -15, 33, 4, 23, 10, 38, 19, 25, 1, -2, -18, 7, -9, 32, 14, -24, -12, -25, 31, 18, 17, 33, 17, -17, -21, -10, 19, -17, -10, 0, -1, -26, -12, 9, 24, 8, 52, 29, 37, -20, 5, 51, 21, 30, 17, -25, -22, 10, -20, -48, -47, -24, 41, 28, -14, -20, -17, 28, -35, -4, -8, 20, 44, -23, -33, -6, 51, 18, -24, 5, 14, -21, -7, -28, -4, 23, 19, -11, -3, 18, 25, -16, 0, -59, -6, 25, -12, -25, 49, -32, 25, 36, 9, 5, 27, -22, 0, -20, -3, -11, 13, -35, -40, -14, 12, 52, 45, 49, -23, -17, -30, -46, -13, -18, -24, -2, -48, -31, -19, -43, 21, 14, 9, 14, 20, 21, 4, -22, 5, 13, -17, -21, -8, 7, 18, -69, 31, 24, 2, -36, -22, -69, -18, 37, 8, -6, -1, 33, 4, -10, -37, 41, 20, -26, -50, 28, -12, 38, 41, -28, 26, 45, 8, -2, 8, -16, -1, 11, -21, -58, 3, -11, 0, 11, 16, -70, 27, 1, 24, 5, -34, -10, -8, -37, 38, 7, -16, -6, -6, -13, -46, 8, -5, -29, -4, 6, -23, -58, -51, -6, -44, -5, 44, -13, -3, -10, -27, -9, 5, -52, -32, -5, -12, -9, -13, -13, -32, -8, 41, 49, -13, -40, -43, -20, -9, -4, -35, 50, -6, -63, 5, 32, 14, -30, -12, -62, -17, -17, 11, -6, -14, 4, -47, -41, -57, 31, 6, -45, 4, -9, -21, 56, 37, 9, 2, -29, -20, -5, 13, -3, -32, 33, 37, -10, -57, -6, -5, 3, -62, -19, 31, -34, -4, -65, 36, 7, -23, -42, -9, 6, 1, 32, 28, 14, -34, 2, 38, 13, -50, -53, -52, 2, -1, -41, -48, 7, -13, 18, -11, -12, -37, -6, 1, -46, 4, -47, -33, -8, 21, -5, 5, 18, -7, -21, -7, 26, -18, 44, 36, -48, -10, 43, 16, -43, -25, 17, -14, -23, 52, -69, 21, 9, -21, 12, -16, 13, 11, 27, -24, -25, -13, 25, -39, 16, -5, -19, 56, -17, -54, -30, 10, 2, -39, -3, -21, -38, -35, 11, 28, -24, 38, 4, -5, -11, -28, -3, -5, -42, 40, -35, -33, -8, -13, 5, -9, 13, -17, -62, -32, 27, -14, -15, -30, 17, 30, -53, -2, 6, -24, -25, -50, 56, -9, 16, -17, 32, -37, 23, -1, -6, -30, -19, 15, -2, -12, -53, -9, -33, 22, -19, -31, 24, 9, -25, -6, -32, 47, 6, 27, 4, -35, -15, 17, -29, 21, -30, 18, 23, -26, -13, -27, -36, 0, 4, -3, -6, -56, -45, -4, -26, 9, -1, 2, -6, 15, 6, -72, 37, 34, -8, -26, 43, -28, -23, 29, 12, 50, -9, -45, 24, 21, 8, -15, 12, 27, -4, -4, 35, -3, -8, -4, -1, -21, -61, -68, -40, -1, 23, -27, 8, 3, -59, -22, -4, -52, -56, 22, -17, 13, 10, -45, 25, -39, 31, -25, 8, -54, -6, -3, 39, -4, 5, 11, -2, 0, -42, -33, -29, 18, 0, 9, -37, -17, -1, 25, 33, -3, 12, 26, -33, 8, 51, -47, 1, -27, -19, -24, -51, -48, -41, 31, 30, -32, -28, 18, -25, 35, 26, 12, -24, 38, 61, 30, 7, -12, 12, 38, 8, -14, 35, 22, 72, 16, -22, -5, 7, 9, -31, -12, -32, 5, -47, 28, 18, 28, 10, 24, -24, 5, -24, -28, -20, -47, 9, 11, -48, -36, -45, 23, 1, -9, 52, -37, 40, -1, -17, 28, -13, 1, -33, 10, -13, -14, -28, -7, -19, 83, 28, 33, -51, -32, -8, -24, 3, -2, -50, -17, -26, 33, -12, -13, 28, -62, 6, -55, -37, -27, 6, 21, -5, -34, -28, -43, -1, 23, 28, 11, -64, 48, -36, -15, -9, -51, -13, 17, -33, -11, -17, 15, -42, -30, 57, 6, 60, -10, -37, -22, 6, 1, -38, -57, -67, -41, 38, -42, 9, -3, 5, 62, -14, 11, -11, -44, -5, -16, -14, -67, -11, 44, 14, -9, 74, 2, -15, -75, -1, -15, -36, -12, -16, -54, -40, -10, 17, 40, -5, 62, -9, 35, -60, 19, -8, -45, 14, 2, -40, -52, 10, 31, 27, 1, 34, -59, 36, -17, 32, 23, -37, -43, 15, -24, -21, 7, 30, 23, 17, 52, -14, 15, -71, 26, 32, -27, -23, -28, -14, -70, 22, 55, 12, 2, 47, -5, 29, -14, -1, -17, -34, -6, -24, 1, -24, 14, 51, 11, -1, 46, 5, 3, -57, 28, 12, 10, 25, 42, 34, -45, 21, 29, -14, 13, 52, 9, 46, -25, 46, -21, -31, -3, 12, -16, -38, -4, -10, 3, -3, 67, -32, 53, -26, 39, 2, -47, 10, 21, -23, -62, -50, 64, 17, 20, 3, 28}

#define TENSOR_DENSE_KERNEL_0_DEC_BITS {8}

#define TENSOR_DENSE_BIAS_0 {15, -6, 62, -52, 58, -19, -23, -74, -60, 26, -62, -65, 102}

#define TENSOR_DENSE_BIAS_0_DEC_BITS {10}

#define DENSE_BIAS_LSHIFT {0}

#define DENSE_OUTPUT_RSHIFT {8}


/* output q format for each layer */
#define INPUT_1_OUTPUT_DEC 4
#define INPUT_1_OUTPUT_OFFSET 0
#define CONV1D_OUTPUT_DEC 3
#define CONV1D_OUTPUT_OFFSET 0
#define LEAKY_RE_LU_OUTPUT_DEC 3
#define LEAKY_RE_LU_OUTPUT_OFFSET 0
#define CONV1D_1_OUTPUT_DEC 2
#define CONV1D_1_OUTPUT_OFFSET 0
#define LEAKY_RE_LU_1_OUTPUT_DEC 2
#define LEAKY_RE_LU_1_OUTPUT_OFFSET 0
#define FLATTEN_OUTPUT_DEC 2
#define FLATTEN_OUTPUT_OFFSET 0
#define DENSE_OUTPUT_DEC 2
#define DENSE_OUTPUT_OFFSET 0
#define DROPOUT_OUTPUT_DEC 2
#define DROPOUT_OUTPUT_OFFSET 0
#define SOFTMAX_OUTPUT_DEC 7
#define SOFTMAX_OUTPUT_OFFSET 0

/* bias shift and output shift for none-weighted layer */

/* tensors and configurations for each layer */
static int8_t nnom_input_data[450] = {0};

const nnom_shape_data_t tensor_input_1_dim[] = {150, 3};
const nnom_qformat_param_t tensor_input_1_dec[] = {4};
const nnom_qformat_param_t tensor_input_1_offset[] = {0};
const nnom_tensor_t tensor_input_1 = {
    .p_data = (void*)nnom_input_data,
    .dim = (nnom_shape_data_t*)tensor_input_1_dim,
    .q_dec = (nnom_qformat_param_t*)tensor_input_1_dec,
    .q_offset = (nnom_qformat_param_t*)tensor_input_1_offset,
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .num_dim = 2,
    .bitwidth = 8
};

const nnom_io_config_t input_1_config = {
    .super = {.name = "input_1"},
    .tensor = (nnom_tensor_t*)&tensor_input_1
};
const int8_t tensor_conv1d_kernel_0_data[] = TENSOR_CONV1D_KERNEL_0;

const nnom_shape_data_t tensor_conv1d_kernel_0_dim[] = {3, 3, 30};
const nnom_qformat_param_t tensor_conv1d_kernel_0_dec[] = TENSOR_CONV1D_KERNEL_0_DEC_BITS;
const nnom_qformat_param_t tensor_conv1d_kernel_0_offset[] = {0};
const nnom_tensor_t tensor_conv1d_kernel_0 = {
    .p_data = (void*)tensor_conv1d_kernel_0_data,
    .dim = (nnom_shape_data_t*)tensor_conv1d_kernel_0_dim,
    .q_dec = (nnom_qformat_param_t*)tensor_conv1d_kernel_0_dec,
    .q_offset = (nnom_qformat_param_t*)tensor_conv1d_kernel_0_offset,
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .num_dim = 3,
    .bitwidth = 8
};
const int8_t tensor_conv1d_bias_0_data[] = TENSOR_CONV1D_BIAS_0;

const nnom_shape_data_t tensor_conv1d_bias_0_dim[] = {30};
const nnom_qformat_param_t tensor_conv1d_bias_0_dec[] = TENSOR_CONV1D_BIAS_0_DEC_BITS;
const nnom_qformat_param_t tensor_conv1d_bias_0_offset[] = {0};
const nnom_tensor_t tensor_conv1d_bias_0 = {
    .p_data = (void*)tensor_conv1d_bias_0_data,
    .dim = (nnom_shape_data_t*)tensor_conv1d_bias_0_dim,
    .q_dec = (nnom_qformat_param_t*)tensor_conv1d_bias_0_dec,
    .q_offset = (nnom_qformat_param_t*)tensor_conv1d_bias_0_offset,
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .num_dim = 1,
    .bitwidth = 8
};

const nnom_qformat_param_t conv1d_output_shift[] = CONV1D_OUTPUT_RSHIFT;
const nnom_qformat_param_t conv1d_bias_shift[] = CONV1D_BIAS_LSHIFT;
const nnom_conv2d_config_t conv1d_config = {
    .super = {.name = "conv1d"},
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .weight = (nnom_tensor_t*)&tensor_conv1d_kernel_0,
    .bias = (nnom_tensor_t*)&tensor_conv1d_bias_0,
    .output_shift = (nnom_qformat_param_t *)&conv1d_output_shift, 
    .bias_shift = (nnom_qformat_param_t *)&conv1d_bias_shift, 
    .filter_size = 30,
    .kernel_size = {3},
    .stride_size = {3},
    .padding_size = {0, 0},
    .dilation_size = {1},
    .padding_type = PADDING_SAME
};
const int8_t tensor_conv1d_1_kernel_0_data[] = TENSOR_CONV1D_1_KERNEL_0;

const nnom_shape_data_t tensor_conv1d_1_kernel_0_dim[] = {3, 30, 15};
const nnom_qformat_param_t tensor_conv1d_1_kernel_0_dec[] = TENSOR_CONV1D_1_KERNEL_0_DEC_BITS;
const nnom_qformat_param_t tensor_conv1d_1_kernel_0_offset[] = {0};
const nnom_tensor_t tensor_conv1d_1_kernel_0 = {
    .p_data = (void*)tensor_conv1d_1_kernel_0_data,
    .dim = (nnom_shape_data_t*)tensor_conv1d_1_kernel_0_dim,
    .q_dec = (nnom_qformat_param_t*)tensor_conv1d_1_kernel_0_dec,
    .q_offset = (nnom_qformat_param_t*)tensor_conv1d_1_kernel_0_offset,
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .num_dim = 3,
    .bitwidth = 8
};
const int8_t tensor_conv1d_1_bias_0_data[] = TENSOR_CONV1D_1_BIAS_0;

const nnom_shape_data_t tensor_conv1d_1_bias_0_dim[] = {15};
const nnom_qformat_param_t tensor_conv1d_1_bias_0_dec[] = TENSOR_CONV1D_1_BIAS_0_DEC_BITS;
const nnom_qformat_param_t tensor_conv1d_1_bias_0_offset[] = {0};
const nnom_tensor_t tensor_conv1d_1_bias_0 = {
    .p_data = (void*)tensor_conv1d_1_bias_0_data,
    .dim = (nnom_shape_data_t*)tensor_conv1d_1_bias_0_dim,
    .q_dec = (nnom_qformat_param_t*)tensor_conv1d_1_bias_0_dec,
    .q_offset = (nnom_qformat_param_t*)tensor_conv1d_1_bias_0_offset,
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .num_dim = 1,
    .bitwidth = 8
};

const nnom_qformat_param_t conv1d_1_output_shift[] = CONV1D_1_OUTPUT_RSHIFT;
const nnom_qformat_param_t conv1d_1_bias_shift[] = CONV1D_1_BIAS_LSHIFT;
const nnom_conv2d_config_t conv1d_1_config = {
    .super = {.name = "conv1d_1"},
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .weight = (nnom_tensor_t*)&tensor_conv1d_1_kernel_0,
    .bias = (nnom_tensor_t*)&tensor_conv1d_1_bias_0,
    .output_shift = (nnom_qformat_param_t *)&conv1d_1_output_shift, 
    .bias_shift = (nnom_qformat_param_t *)&conv1d_1_bias_shift, 
    .filter_size = 15,
    .kernel_size = {3},
    .stride_size = {3},
    .padding_size = {0, 0},
    .dilation_size = {1},
    .padding_type = PADDING_SAME
};

const nnom_flatten_config_t flatten_config = {
    .super = {.name = "flatten"}
};
const int8_t tensor_dense_kernel_0_data[] = TENSOR_DENSE_KERNEL_0;

const nnom_shape_data_t tensor_dense_kernel_0_dim[] = {255, 13};
const nnom_qformat_param_t tensor_dense_kernel_0_dec[] = TENSOR_DENSE_KERNEL_0_DEC_BITS;
const nnom_qformat_param_t tensor_dense_kernel_0_offset[] = {0};
const nnom_tensor_t tensor_dense_kernel_0 = {
    .p_data = (void*)tensor_dense_kernel_0_data,
    .dim = (nnom_shape_data_t*)tensor_dense_kernel_0_dim,
    .q_dec = (nnom_qformat_param_t*)tensor_dense_kernel_0_dec,
    .q_offset = (nnom_qformat_param_t*)tensor_dense_kernel_0_offset,
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .num_dim = 2,
    .bitwidth = 8
};
const int8_t tensor_dense_bias_0_data[] = TENSOR_DENSE_BIAS_0;

const nnom_shape_data_t tensor_dense_bias_0_dim[] = {13};
const nnom_qformat_param_t tensor_dense_bias_0_dec[] = TENSOR_DENSE_BIAS_0_DEC_BITS;
const nnom_qformat_param_t tensor_dense_bias_0_offset[] = {0};
const nnom_tensor_t tensor_dense_bias_0 = {
    .p_data = (void*)tensor_dense_bias_0_data,
    .dim = (nnom_shape_data_t*)tensor_dense_bias_0_dim,
    .q_dec = (nnom_qformat_param_t*)tensor_dense_bias_0_dec,
    .q_offset = (nnom_qformat_param_t*)tensor_dense_bias_0_offset,
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .num_dim = 1,
    .bitwidth = 8
};

const nnom_qformat_param_t dense_output_shift[] = DENSE_OUTPUT_RSHIFT;
const nnom_qformat_param_t dense_bias_shift[] = DENSE_BIAS_LSHIFT;
const nnom_dense_config_t dense_config = {
    .super = {.name = "dense"},
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .weight = (nnom_tensor_t*)&tensor_dense_kernel_0,
    .bias = (nnom_tensor_t*)&tensor_dense_bias_0,
    .output_shift = (nnom_qformat_param_t *)&dense_output_shift,
    .bias_shift = (nnom_qformat_param_t *)&dense_bias_shift
};

const nnom_softmax_config_t softmax_config = {
    .super = {.name = "softmax"}
};
static int8_t nnom_output_data[13] = {0};

const nnom_shape_data_t tensor_output0_dim[] = {13};
const nnom_qformat_param_t tensor_output0_dec[] = {SOFTMAX_OUTPUT_DEC};
const nnom_qformat_param_t tensor_output0_offset[] = {0};
const nnom_tensor_t tensor_output0 = {
    .p_data = (void*)nnom_output_data,
    .dim = (nnom_shape_data_t*)tensor_output0_dim,
    .q_dec = (nnom_qformat_param_t*)tensor_output0_dec,
    .q_offset = (nnom_qformat_param_t*)tensor_output0_offset,
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .num_dim = 1,
    .bitwidth = 8
};

const nnom_io_config_t output0_config = {
    .super = {.name = "output0"},
    .tensor = (nnom_tensor_t*)&tensor_output0
};
/* model version */
#define NNOM_MODEL_VERSION (10000*0 + 100*4 + 3)

/* nnom model */
static nnom_model_t* nnom_model_create(void)
{
	static nnom_model_t model;
	nnom_layer_t* layer[9];

	check_model_version(NNOM_MODEL_VERSION);
	new_model(&model);

	layer[0] = input_s(&input_1_config);
	layer[1] = model.hook(conv2d_s(&conv1d_config), layer[0]);
	layer[2] = model.active(act_leaky_relu(0.300000f), layer[1]);
	layer[3] = model.hook(conv2d_s(&conv1d_1_config), layer[2]);
	layer[4] = model.active(act_leaky_relu(0.300000f), layer[3]);
	layer[5] = model.hook(flatten_s(&flatten_config), layer[4]);
	layer[6] = model.hook(dense_s(&dense_config), layer[5]);
	layer[7] = model.hook(softmax_s(&softmax_config), layer[6]);
	layer[8] = model.hook(output_s(&output0_config), layer[7]);
	model_compile(&model, layer[0], layer[8]);
	return &model;
}
