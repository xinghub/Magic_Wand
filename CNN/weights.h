#include "nnom.h"

/* Weights, bias and Q format */
#define TENSOR_CONV1D_KERNEL_0 {6, 46, -36, -19, 95, -41, -61, -10, -34, 51, 38, 20, 80, 21, -66, 29, -19, 17, 34, 62, -9, 76, -24, 61, 54, -23, -9, 17, 63, -52, 71, -27, -76, 73, 42, -47, 48, -8, -36, 62, -52, -80, 48, 51, -28, 74, -60, 24, 46, -37, -37, 11, -43, 5, -76, -24, 19, -31, -91, 72, -3, -35, 9, 30, 27, 33, 12, 28, -7, 97, 24, -20, 31, 3, 86, 5, 86, 89, 18, 87, 27, 0, 9, 84, 9, 71, 40, 69, -27, -28, 58, 60, -26, -8, 54, 41, 38, 10, -52, -25, 2, -15, 68, 34, -9, 62, -89, -60, 33, 1, 58, 43, 56, 0, 51, 46, -36, -6, 84, 61, -20, -7, -40, -84, 80, 28, -63, -3, -75, -11, 7, -91, -9, 70, -74, 34, 8, 24, 45, -37, -25, -15, 21, -38, -44, 7, -84, -32, -81, -65, -79, 40, -94, 61, 11, 44, 66, 15, -26, 44, -64, -42, -50, -18, 23, 34, -50, 58, 62, -35, 50, 12, -5, 43, 37, -52, -39, 22, -19, 63, -9, 41, 42, -41, 56, 72, -52, -1, 42, 34, 4, 55, -83, 13, 49, -60, -73, -15, 56, -7, 77, -18, -28, 47, 66, -26, -26, -88, 21, -20, -46, 24, 12, -39, -24, 42, -2, 3, -8, -57, 36, 22, -48, 76, -34, 25, 20, 25, 23, -44, 52, 79, 68, 23, -4, -1, 48, -23, 70, 23, 62, 54, -28, 33, 44, 55, 52, 12, 85, -30, -3, -2, -78, 40, 36, -30, 27, 30, -89, 18, -28, 49, 68, 72, -23, 6, -38, 55, 44, 23}

#define TENSOR_CONV1D_KERNEL_0_DEC_BITS {8}

#define TENSOR_CONV1D_BIAS_0 {47, -16, 70, -29, 24, 20, 73, -27, 18, 27, 30, 109, 91, -2, -77, 27, 16, 65, 56, 65, 47, 36, 3, -11, -47, 36, 61, -9, -2, -35}

#define TENSOR_CONV1D_BIAS_0_DEC_BITS {9}

#define CONV1D_BIAS_LSHIFT {3}

#define CONV1D_OUTPUT_RSHIFT {9}

#define TENSOR_CONV1D_1_KERNEL_0 {-18, -59, 11, 19, -22, -20, 58, -18, 18, 21, -56, -48, -68, 20, 1, -22, 61, -59, 36, 28, 43, 56, 37, 14, -26, 48, -72, -4, 23, -19, 36, -50, -22, 35, -19, -25, 8, 34, -28, 2, -6, -6, -52, -29, -38, -35, -2, -31, -7, 32, -20, 77, 12, -6, 7, -24, 26, 46, 54, -36, -41, 7, -22, -18, 11, 13, 68, -4, -20, 16, -42, -27, 11, -19, 44, 14, -8, 37, 55, -13, 30, 29, -15, 60, 16, 40, -10, 42, 64, 14, 29, 32, -51, 15, -9, 30, 58, 16, -65, -53, 23, -14, -12, 17, -11, 44, 67, -17, -30, -28, 6, 22, 1, 36, 66, 14, 8, 38, 11, -24, 61, -46, -56, 11, 30, -24, -43, 22, -26, 16, -50, -65, -56, 11, 72, 38, 53, -28, -9, 36, -48, 31, -65, 17, -7, -27, -69, -40, 59, 31, 32, 6, -26, 7, -32, -32, 10, -46, 1, -30, 35, 15, 6, 51, 2, -61, 41, 36, -35, 19, 33, 44, -30, 74, 33, -32, -62, -44, 16, -52, 43, -8, -12, 20, -37, 33, 78, -53, 9, -15, -21, -36, -55, 4, 25, 4, 59, -35, -17, 53, 38, 54, 18, -47, -21, -38, -14, 43, -26, -58, -3, 10, 36, -18, 6, 1, 22, 15, 21, -27, 11, 4, 11, 19, -9, -47, 29, 46, 64, 67, 8, 3, -38, 53, -2, -38, 3, 8, 12, -14, -48, -14, 21, -27, 24, -18, 0, -48, 2, 12, -40, 60, 52, -27, 39, 9, 32, 30, 68, -17, -20, 0, 65, -18, -59, 53, 45, 28, -51, -7, -13, 28, 15, 25, -37, 42, -48, 73, 27, 16, -20, -39, 64, -2, 33, -12, -29, -10, 48, 20, -25, -34, 37, 64, 75, 32, -5, -18, 60, 57, 57, 31, 16, 42, 15, 44, -47, 18, 12, 33, 37, -6, 15, 31, 45, 14, 62, 35, -48, -23, 24, 44, -9, 2, 12, -36, -24, -21, 24, 68, 45, -33, 34, -2, 3, 37, 42, 47, -7, -13, 38, -46, -19, 63, -6, -29, 43, -51, -24, 41, 45, 10, 17, 1, 18, 44, -31, 27, 19, 54, 40, 14, -6, 65, 27, 30, -70, -38, -6, -69, 27, 70, -37, 41, 47, 44, 23, -36, -44, -19, 22, -55, -33, -24, -7, -54, 12, 10, -47, 51, 44, 23, -8, 33, 23, -17, -12, -24, 40, -54, 31, 25, -19, -15, 37, -1, 53, -33, -23, -59, 15, -52, 27, -48, -33, 39, 11, -34, 43, 25, 53, -16, -22, 36, 87, -37, -86, 77, -2, 23, 23, 4, 26, 51, 54, -34, -12, 26, -25, -46, -8, 10, -62, -21, 34, -40, 58, -17, -4, -1, -45, -23, 45, 3, -53, 53, -3, -19, -34, 2, -36, -6, 29, -31, -53, 39, -38, -21, 30, 73, 44, -45, -5, 7, -36, 38, -3, 14, -47, -2, 24, -13, 21, 37, -10, 47, 63, -51, 61, 71, -17, 55, 42, -12, -48, -16, 47, -26, 59, -22, 48, -19, 1, -43, -58, -5, 44, 19, -3, 31, 27, -52, -13, -12, 17, -5, 44, 32, 41, -14, -19, 18, 65, -26, -4, -32, 31, -9, 16, 66, 70, 30, 54, -40, 12, -1, 25, 17, -27, 43, 33, -10, -48, 91, -1, 14, 26, -6, -81, -23, 15, 32, 41, -10, -11, 6, 79, -20, -56, -10, -82, 26, -9, -8, -16, -12, -41, -48, -34, -49, 54, -25, -43, 61, 79, 13, 6, -47, -59, -74, 5, 8, -4, -45, 13, 49, 62, 71, -31, 24, -79, -57, -59, 32, 33, 14, -72, -67, -44, -49, -21, 0, -13, 43, 77, 53, -29, -4, -39, -2, 30, 55, 11, -70, 14, 18, 71, -27, 4, -60, -11, -23, 14, -57, -37, -3, -80, -64, -45, -60, -6, 35, -41, 21, -45, 26, 46, -63, -2, -3, 31, 19, -52, 2, 48, 44, 53, 12, 25, -42, 30, -11, -16, 12, -2, -34, -51, 23, 51, 36, 36, -27, -28, 36, -17, -16, 48, -12, 38, 22, -17, -25, -58, 54, 1, -16, 55, -40, 11, -7, -18, -4, 3, 34, 15, 15, -62, 24, 33, -26, -35, -51, -49, -53, -57, 12, 40, -28, -21, 10, -3, -45, -30, -5, 17, 27, 25, -66, -22, -8, 35, 82, -51, 67, -45, -16, -55, 39, 61, 20, -33, 58, 23, 6, 62, 63, -79, 46, -23, 18, 5, 23, 68, -34, 54, 14, -46, 28, -12, 19, -6, -18, 25, -33, -25, 44, 24, 21, -54, 49, 46, 62, 51, 71, 66, -31, -43, 76, -18, -21, -1, 79, 67, -56, -36, -22, 44, 9, 4, -7, -54, -78, 63, -38, 45, -12, 2, -32, 0, 3, -5, 51, 29, 53, 27, 74, -40, 42, 0, 29, 59, 13, 34, -62, 0, 17, -30, 48, 30, 66, -11, -30, 47, -44, -52, 6, 39, -28, -32, 5, 41, 55, 35, -35, 26, -34, 51, 40, -59, -18, 40, 85, 57, -21, -60, 32, -37, -7, 17, -2, 52, 45, 20, 21, 20, -41, 30, -37, 62, -19, 9, 12, 39, -2, 74, 31, 14, -20, -69, -33, 0, 89, -9, 3, -78, 49, -46, 60, 20, 45, -27, 14, -32, -18, -30, 32, 16, -5, 8, -14, 19, -30, 0, -21, 35, 40, -28, 1, 17, 46, 13, 87, 41, 8, 10, 30, 22, 77, -59, 0, 31, -10, -17, 27, 4, 47, 50, -38, 7, -37, 20, 42, 4, 30, -32, 32, 30, 41, 12, 21, 59, -33, 22, -7, -8, 57, -28, 22, 14, 37, 61, 15, 11, -36, -40, -11, 30, 11, 7, 65, -64, 56, -10, 1, -1, 24, 32, 66, 49, 27, -16, -33, -33, -23, -51, 23, -11, 13, -6, 22, 38, 8, 50, -12, -56, 8, 6, 73, -19, 10, -30, -3, -17, -7, -49, -20, 65, -8, 29, 62, -39, 8, 12, 8, -36, -33, -63, -14, -22, -14, 65, 6, 38, -17, 18, 56, 46, -7, 47, -35, -54, 36, 9, 2, -44, -6, 16, 63, 20, -17, 29, -20, 15, -48, -11, -20, 22, -40, -6, 67, 50, -22, 70, -17, 9, 41, 32, 69, -3, 29, 22, 58, 34, -18, 42, -6, -37, 49, 72, 42, -8, -27, 65, 34, 37, -40, -59, 27, 12, 28, 49, 0, -13, 34, 25, 68, -8, 28, 14, 20, -1, -40, 32, 44, -40, 2, -15, -22, 31, 6, 57, -14, 15, -39, -24, 37, 1, 50, -19, 35, 22, -17, 4, -31, 10, 72, 64, 72, -17, 25, 24, -5, 33, 14, -75, 14, 73, -29, 14, 37, -11, 51, 12, -11, -32, -21, -44, 8, 33, 32, 4, 47, 59, 31, -69, 7, 63, -27, -13, -23, 28, -45, 19, -56, -60, 11, 3, -1, 61, 59, 9, 38, 54, -51, -64, -44, 5, -38, 52, 62, -14, -8, -9, 8, -66, 14, -9, -25, -20, 40, 7, -32, 55, 34, -50, -31, -12, -21, 9, 31, 47, 58, 35, 9, -49, -12, 34, -3, 41, 66, -20, -4, 38, -15, -55, 28, 6, 1, 12, -18, -46, -40, -19, -50, -27, 29, -9, 30, 51, -35, -48, -44, 40, -43, -29, 33, 7, 37, 6, -4, 3, 46, -38, -29, -21, -2, 32, 52, 34, 16, -17, -49, 12, -46, -20, -62, 69, -55, -12, 54, -27, -2, 38, 20, -27, -19, -33, -34, 8, 5, 40, 58, -16, 58, 39, 54, -36, 55, -24, 55, -41, 21, -48, -24, -15, -34, -4, 10, 51, 47, 4, -48, -14, 56, 11, -22, -57, -17, 31, -24, 47, 64, 49, -15, 29, 43, -8, -30, -2, 12, -27, -55, 25, -21, 8, -38, -30, -11, 66, 35, -20, 42, 58, 44, -40, -28, -48, 35, 1, -18, -5, 46, 33, -1, -39, 35, 59, 63, 15, 15, 7, 42, 34, -25, 17, 23, -44, -49, 0, 6, 39, -43, -39, 49, -39, -35, 41, 5, -8, -64, 70, 18, -52, -13, 10, -52, 62, -27, 26, 34, 17, 5, -28, -43, 30, -39, -23, -30, 41, -40, -2, -17, 36, 27, -39, 50, 21, -21, -7, 26, 25, 21, -43, -30, 49, -13, -22, 9, 55, -2}

#define TENSOR_CONV1D_1_KERNEL_0_DEC_BITS {8}

#define TENSOR_CONV1D_1_BIAS_0 {-40, -2, 38, -36, 12, 57, 39, -10, -49, 84, -4, 15, 79, -8, 32}

#define TENSOR_CONV1D_1_BIAS_0_DEC_BITS {9}

#define CONV1D_1_BIAS_LSHIFT {2}

#define CONV1D_1_OUTPUT_RSHIFT {9}

#define TENSOR_DENSE_KERNEL_0 {20, -1, 5, -53, -3, 8, 15, 23, 10, -47, 19, -17, -40, -60, 0, -46, 19, -44, -18, -2, -48, -44, 15, -51, -17, 11, 31, -43, -36, -26, -16, -29, -64, 5, 6, 9, -13, 29, -13, 23, 9, 19, -39, -1, -52, 10, -3, -7, -35, 6, 61, -29, 19, -33, -27, 30, -46, -38, 53, 4, -59, 1, -11, -16, 26, -30, 29, -17, -50, 9, -8, -15, -27, 9, -68, 14, -26, 16, -9, -25, -17, -11, 0, -8, 36, 33, -19, -47, -9, -49, -26, 20, -68, -19, -17, -16, 21, -42, -48, 37, -3, -23, -20, -16, 20, 22, -33, -25, -32, -4, 23, 30, -15, 13, 2, -3, -24, 3, -20, -4, -3, -49, 39, 13, 1, 13, -16, -61, -1, 18, -38, -1, -30, -29, -62, 4, 16, 42, -32, -2, -40, -17, -9, -1, -65, -78, -6, -16, -32, -34, 15, -14, 25, -55, 22, 39, -15, -42, 11, 17, -22, 54, 29, 43, 24, 30, -39, -13, -67, 15, 42, 31, 1, -25, -4, 6, -3, 1, 48, 10, -19, -7, -1, -18, 18, -11, 48, -36, -65, -27, -23, 3, 4, -6, -47, 5, -36, 3, -7, 9, -71, 36, -9, -64, -46, -7, -1, 7, -7, -19, 57, 37, 4, -22, -13, -11, -42, 32, -31, 33, 4, -3, 23, -28, -39, 19, -2, -2, 10, 25, -35, -36, -19, -10, 23, -17, 36, 1, -16, 29, 22, -58, 42, 8, -14, -9, -50, -47, -1, -3, 4, 17, -21, 20, 28, 8, -4, -8, -48, -47, 18, -16, -17, -11, 18, 20, 33, 14, -9, 23, -5, 27, -29, -22, -31, 19, -10, 35, -29, -21, -9, -29, 21, 35, 32, 22, 21, -10, -32, -8, 12, -13, 36, -12, -16, 14, -15, -28, 8, -37, -12, 3, 19, -3, 15, -53, -8, -1, 5, 38, 23, 9, -8, 1, -48, -45, -29, -54, -40, 21, 10, -20, 8, 27, 0, -12, -31, 10, -31, 6, -2, 21, -24, -52, -1, 15, -44, 24, -22, 29, 18, -14, 14, 24, -2, 8, 2, 34, 21, -6, -8, 13, -13, -13, -9, -27, -17, 9, 26, -27, -28, 6, 6, -40, 1, -6, -26, -17, 16, -38, -3, -4, -23, -41, -35, -38, 5, 13, 17, 4, -4, 11, -20, -56, -2, -18, -11, 29, -23, -28, 49, 8, 13, 24, -26, -9, -4, 41, 3, 5, 26, 35, -26, 14, 24, 7, 14, -9, -11, -10, 1, 7, -17, -20, -37, -10, 32, 14, 19, 17, 8, 4, 3, -13, -33, 30, -47, -54, 14, 12, -15, -46, -27, -14, 22, 27, 4, -43, 43, -20, -15, -8, -37, -35, -54, 11, -24, 8, 8, 23, -9, -10, 6, 36, 38, 43, -5, 3, -38, 7, 17, 35, 32, -41, 16, -31, -4, -35, 32, -10, -23, -37, -21, -14, 50, -6, 30, -15, -51, -40, 20, -30, -12, -27, -27, -4, 18, -21, -37, -16, -23, 23, -36, -28, -38, -32, -27, -16, -6, -30, -16, -13, -20, 53, -11, 5, -29, 25, -33, 21, -21, 18, -55, 13, 31, 16, 31, -8, 3, -13, -31, 32, 29, -47, 23, 24, 5, -40, 0, -16, -12, -31, -23, -64, -12, -29, 36, 29, 6, -34, -4, -53, 17, 39, -51, -15, -43, -27, 20, 23, -50, 12, -20, -57, -47, -8, 1, -13, -3, -17, -15, 7, -5, -10, -3, -22, -11, 13, -31, 9, -22, -39, -61, 39, 16, 26, 15, -31, -21, -41, 25, 42, 15, -55, 29, -11, -9, 2, 22, -19, 46, -49, -12, -6, 23, 4, -47, -9, 22, -2, -6, -29, -1, -23, -27, -37, 2, -25, 35, -40, -40, -25, -20, 6, -59, 46, -22, 13, 2, -11, 40, -7, -24, -55, -1, -5, 12, -34, -38, 40, 7, -26, -9, -24, 15, 15, -10, -13, 24, 30, -9, -34, 15, 23, 5, 11, 26, -6, 2, -29, 24, -17, 29, -6, -6, 11, 25, -34, -53, 13, -22, 19, -27, 17, -39, 19, -2, -59, -15, -31, 6, -32, -44, 12, -20, -45, 34, -7, -25, -6, -6, -53, -4, -51, -11, 9, -69, -3, -27, -37, 29, 0, -30, -28, 39, 2, -28, -65, -17, -62, 24, 51, -11, -26, -12, -61, -14, -35, 23, -35, -41, 2, 10, 32, -39, 4, 13, -34, 1, -41, -8, -33, 45, -38, -32, 6, -33, -33, -32, -6, -20, -36, -32, 6, 17, -49, 26, -41, 0, -10, -52, 38, -15, 38, 46, -14, -50, -30, 23, 11, 30, -10, -22, -44, -45, -28, -30, 59, -28, 17, 15, 0, 7, 5, -54, 39, 25, -28, 23, -12, 12, 41, -3, -51, -21, -33, 12, 8, -24, 18, -32, -19, 13, -65, 18, 13, 10, -15, -19, -40, -19, 5, -52, 7, 12, -33, 2, -12, -11, 45, 11, -48, 1, -6, 27, -32, 12, -14, 9, -43, -26, -51, 2, 19, 14, -10, 4, 22, -30, -41, -5, 20, -16, -36, -21, -17, 31, 6, -28, -34, -29, -29, 32, 22, -63, 47, -7, 2, -19, -38, -6, 17, -62, 19, -8, -12, -39, -37, 28, -8, -27, -58, 19, -31, -1, -5, -5, 13, 46, 22, -22, -14, 10, -35, 20, -33, -18, 22, -28, 7, 33, -11, 5, 23, -2, -21, 23, -63, -4, 7, 37, -56, -7, 24, -38, -17, 21, -23, 22, -43, -26, 2, 34, -3, -20, -64, -12, 13, -25, -4, 31, -7, 28, 8, -49, -14, -23, 0, -25, -9, -29, -58, -14, 5, 22, -34, -31, -1, 27, -51, 16, -42, 9, 23, 2, 36, -30, 53, -30, 8, -15, 25, -34, -48, -10, -55, 32, 14, -18, -46, 30, 50, -3, -48, 17, 23, 25, -32, 14, -10, 0, -64, -15, -38, 18, -19, 25, -49, 2, -74, -42, 18, -21, 17, 16, -35, -4, -36, 35, 35, -24, -13, 9, 38, 17, -27, 11, -29, 30, -11, -45, 2, -15, 11, 23, 11, -8, -36, -30, -28, -7, 26, 35, -7, -30, -19, 33, -6, 22, -47, -43, 21, 23, -35, 28, 8, -5, -78, 38, -43, -50, 3, 20, -15, 9, -21, 35, 2, 26, -13, -8, -15, -17, -10, 29, 12, -12, 24, -41, -17, -22, -27, 1, -20, -19, -40, -42, -19, -61, 42, -28, -22, -14, -60, 1, 27, -34, -26, -1, -2, 15, -55, 19, -30, 31, 26, -19, 55, 21, 36, -24, 10, -28, 10, 7, 7, 20, 5, 3, -11, 18, 29, 8, 0, 60, -32, 54, -7, -23, -30, 28, 38, 22, 26, -59, -19, -66, -39, 9, -16, -4, -35, 25, -33, 7, 31, -28, -25, 16, -2, 11, -11, -23, 20, 8, 24, -8, -18, -14, 1, -25, -24, -40, -29, -69, -22, -30, -19, -9, -46, -32, -28, -1, 4, 60, -5, 19, -28, 51, 41, -31, -12, 29, -26, 25, -39, 30, -14, 21, 5, 42, -52, -2, 32, 54, 1, -13, -41, 33, 34, -2, 41, -17, -59, -20, -15, -21, -28, 39, 19, -8, 28, 37, 24, -32, 55, -36, -37, -31, -31, -12, 10, -35, 23, -47, 10, -12, 17, -72, -39, -2, -12, 32, -11, 42, -7, -14, -33, 30, -2, -20, 31, -36, -48, 51, 4, 23, -56, -55, 7, 18, 21, -17, -15, -45, 13, 6, -21, 30, -17, -10, -7, -29, -18, -17, -15, -6, -1, -37, 0, -57, 14, -12, 23, 6, 42, 13, -34, -1, -16, -11, -20, 3, -1, -48, -11, 1, 4, 0, -38, -50, -50, 20, 0, -33, -24, 21, 17, -41, -12, 58, -5, 42, -35, -24, 8, 31, 2, 42, 41, 32, -32, 5, -17, 2, 32, -29, -22, -31, 26, 8, -10, -20, -34, -36, 32, 0, 29, -23, -16, 40, -15, -23, -32, 18, -21, -31, 40, 30, -40, 6, 35, -16, -16, 19, 7, -43, -63, -1, 27, 7, -28, 8, 0, -17, -49, -2, 14, 42, -27, -31, 32, 36, 17, 10, -2, 5, -20, -43, 6, -9, -30, -1, 9, 31, -11, 16, 4, -28, -41, -51, 12, 47, 29, -4, 17, 6, -5, -24, 30, 50, -44, 4, -7, -16, -24, -35, -11, -14, 21, -48, -38, 18, 12, -36, -5, -32, 0, 46, 8, 1, -11, -24, 27, 21, -44, -15, 12, 8, -23, -11, -3, -18, 7, -52, 27, 1, 22, 12, -26, -21, 20, 40, -6, 2, 6, 0, 8, -26, 26, 7, -41, 33, -15, -13, 56, -3, 45, 28, -41, -35, -35, -3, -12, 20, -19, -37, -7, -24, 29, -36, 4, -17, 22, -42, 8, 6, 4, -27, -16, 11, -44, 10, 0, 4, -36, -33, -27, -20, -27, 22, -45, -9, 14, -23, -30, 35, -13, -11, -24, -43, -16, 22, 6, -41, -24, -9, -28, -35, -13, 19, 15, -30, -46, -13, 9, -51, -20, -33, -8, -20, -14, 9, 39, -8, 24, 16, -11, 4, -4, -5, -19, 16, 28, -81, -9, -4, -3, 3, -46, -8, -1, -4, 15, 42, 4, 44, -31, -19, 1, 38, -3, 35, -23, -36, -2, 9, -40, 41, -1, 1, -47, -43, -16, -27, 34, -6, -29, -37, -8, -4, 15, 4, 17, -52, 9, -16, 17, 28, -8, -4, 4, 16, 23, 5, -5, 3, -31, -24, 21, -19, -21, -46, 10, -11, 21, -60, 1, -11, 36, -35, 11, 26, -23, -51, -22, 15, 8, -1, -43, 35, -4, -14, -31, -11, 28, -26, -24, -6, 21, -4, -30, -16, 10, -6, 3, -13, 19, 5, -20, -19, 6, 25, -50, 18, 2, 39, 23, -15, 29, -18, -15, -11, -3, -16, -42, 31, -42, 29, -5, -62, 24, 28, -5, -49, 32, -49, 17, 12, -26, -40, -44, -29, 33, -37, 45, 11, 7, 18, 20, 28, -46, 0, 24, 24, 26, 24, 10, -31, -6, 8, 45, -5, 24, 27, 33, 41, 5, 3, -21, 11, 8, 33, -34, -12, 39, -35, -25, 12, -40, 24, 20, -15, -50, -31, -35, -2, -15, 38, -11, -11, 31, -5, 1, -15, 23, 39, -5, -62, -4, -11, -36, 16, -21, -38, 12, -5, 17, -19, -30, 53, 2, -11, 25, -20, -8, -22, 24, 26, 4, -3, -20, -17, -38, 39, 33, 6, -41, -13, -56, -11, 7, -25, -23, 24, -35, -26, 0, 20, 2, -10, -34, -35, -4, 0, 31, 22, 45, -14, -31, -1, 22, 34, -44, -44, -29, -31, -12, 0, 14, 13, 2, -24, -2, -1, -35, -23, 42, 32, 31, -13, -16, -15, -3, -27, -9, 25, 30, 28, 18, 28, -9, -55, 14, 25, -55, 44, 36, 23, 17, 31, 22, -8, -44, 11, 14, 39, 21, -32, 11, -57, 5, -32, 36, -52, -19, -23, -11, -29, 32, 16, -45, -37, 35, 7, 36, 9, -8, -27, -13, -69, 4, 7, 7, -5, 25, -20, -17, -37, 7, 35, -24, 36, 31, 21, 8, -13, 7, -15, 14, 33, 22, 47, -1, 12, 17, -29, 27, 52, 1, 49, -40, -2, -15, -30, -15, 33, 11, 20, 6, 8, -11, -12, 25, 27, -3, 34, -4, -18, -12, -60, 10, 45, -47, -50, 0, -52, 49, 19, 4, -2, -14, -21, -17, -7, 4, -34, 26, 22, 32, -1, -12, 39, 61, -3, -9, -26, -3, -23, -72, 3, -8, -45, -12, 6, 35, 39, -30, -44, 5, -5, 12, -6, -23, 45, -19, -23, 6, 15, -6, 11, -14, -4, -14, -54, -39, -46, -23, 12, -34, -31, 48, -34, -10, -41, 12, -12, -47, -42, -16, -6, 20, 37, -5, -14, 11, 16, 1, -30, -15, -16, -8, 36, -25, -23, 7, -24, 38, 8, 2, 28, 20, -22, -21, 26, 8, -12, -25, 42, -78, 56, 22, 13, 22, -12, 37, 50, -20, 9, 44, 30, -23, -52, 24, -20, 25, 10, -34, -13, -12, 5, 28, 32, -38, -67, -9, -28, 39, -15, -13, 7, 24, 33, -16, -30, -8, -34, -40, -11, -11, -15, 7, 13, 7, 10, -28, -38, 23, -12, -8, 38, -14, 3, -4, -40, -26, 18, -79, -6, -19, -17, -45, 19, -34, -11, 47, -46, -51, 21, -42, 10, -20, -43, -58, -9, 63, -8, 9, -4, 9, 26, -22, -82, -7, -34, 37, 22, -6, -3, 61, -8, -15, -42, 5, -52, -40, 10, 43, 17, -13, 23, -8, 11, -9, 4, -3, -42, 20, 1, -9, -20, 33, -5, 16, -28, -70, 41, -18, -26, 3, 17, 34, 0, 34, -15, 8, -12, -55, -14, -31, 35, 43, 8, 7, 7, -12, 2, -9, -66, 4, 13, -26, 51, -48, 0, -5, -8, -16, -51, -45, -35, -40, 0, -7, 3, -13, -6, 0, 17, -29, -31, 10, -15, -4, -3, -40, -3, 40, -19, -40, -57, -8, 0, -10, 36, -9, -21, 4, -9, 6, -8, 20, -27, -18, -39, 0, 25, 2, 14, 46, -18, -33, 2, -19, -21, -26, -57, 17, 9, 54, -17, 9, 20, 10, 17, -48, -40, -6, -53, -16, 13, -42, -37, -33, -35, -58, 6, -17, -39, -22, -52, -57, -80, -8, -36, -47, -16, -18, -1, -13, -20, -16, -5, -8, -68, -71, -18, -20, -34, -40, -42, 15, -27, -19, -12, 8, -1, -16, -27, 9, -48, -12, 1, -55, 13, 24, -34, 3, 17, -33, 5, -42, 11, -42, 10, 9, -30, 45, 11, 6, -44, -37, -51, -3, 24, -54, -29, -2, 7, -53, 6, -17, 21, -29, -10, -21, -65, -43, -15, 28, -25, -41, 9, 28, 14, -51, -59, -28, -11, -11, 3, 23, 24, -42, -17, -3, -45, 35, -27, -15, 4, 15, -16, 5, -50, 8, 5, -14, 20, -33, 38, -13, -9, -21, 17, -34, -39, -28, -1, -48, 41, -4, -26, -44, -26, -17, 30, -5, -44, -60, -2, -1, -36, -50, -10, 2, 18, 12, 15, -50, 35, -23, 14, 0, -37, -8, 25, -20, -20, 19, -19, -23, 34, 24, -52, 31, -11, 51, 40, -7, -29, -24, 25, 15, -49, 1, 22, -70, 26, 27, -12, -17, -32, 56, 19, -33, 32, -58, -4, -5, -33, 6, 17, -60, 26, -42, -54, -17, 20, -13, -21, 0, -19, 2, -55, -22, -9, -38, -12, -22, -12, -35, 21, -29, 36, -7, -53, -8, -10, 12, 6, 45, 6, 20, -38, 54, -29, -7, 44, 5, 30, 18, -23, -7, -10, 20, -1, 5, 1, 23, 27, 1, 10, -10, -7, -45, -20, 4, -27, 23, 29, -42, 5, -9, -5, -33, 34, 16, -41, 10, -7, -15, -26, -6, 46, -21, -12, -6, 10, 20, -49, -2, -44, -46, 8, 13, 38, 1, 38, 41, -11, 56, 5, 7, -12, -9, -46, -3, -20, -20, 39, -3, 30, -25, 43, 49, 7, -43, 37, -19, 28, 3, -22, -54, 11, -16, -30, -10, 14, -63, 21, -3, 16, -23, -15, -26, -48, 25, -13, 35, -16, 41, -44, -45, -60, 9, -29, -6, -10, -54, -40, -41, 36, 36, 41, -14, 38, -7, 0, 0, -10, 17, -5, -19, 3, 23, 26, -27, -44, -24, 38, 40, 21, 45, -25, -8, -16, 12, 14, -2, -25, -39, 27, 55, 4, -12, 25, 0, -13, 7, -25, -23, 20, 24, -19, -1, -25, 31, -11, -3, -53, 27, -8, 14, -10, 51, -49, -16, 1, 19, -10, -30, 16, 27, -28, 6, -17, -3, 24, -44, 22, -22, 23, -22, 8, -35, 27, 8, 10, 16, 26, 2, -29, 34, -11, 6, -27, 18, -56, 4, -10, 34, 19, -42, -26, 5, 26, -2, -20, 28, 4, 0, -17, -3, 14, -37, 7, -21, 2, -12, -37, 7, 7, -17, 18, -40, -1, 18, 10, 18, 3, -18, -8, 52, -23, 1, 2, 24, -12, 42, 43, 5, 11, 4, 40, -21, -43, -4, 36, -7, 34, -21, 4, -20, 3, -15, 19, 3, -26, -37, 47, 7, -4, 19, -31, -33, 34, 6, -11, -9, 4, -43, 5, 8, -29, -16, 8, 32, -42, -16, -45, 44, -25, 8, -21, -7, 0, 41, 23, 46, 5, 25, 12, -35, 11, -31, -8, 0, -2, -9, 12, 10, -17, 29, -4, -19, -1, -5, 44, -18, 43, -12, -34, 34, 23, 20, 27, 10, -24, -17, -10, -10, 19, -37, -7, 6, 28, 27, -44, -21, -7, 18, -25, 18, -12, -24, 6, -19, -28, 36, -16, 19, -50, -35, 4, 23, -54, -5, -14, -1, -28, -19, 13, 14, -53, 12, 6, 32, -6, -20, -43, 28, 17, -60, 6, 15, 24, 9, -58, 12, 11, 2, 7, -29, -3, 44, -49, 29, -35, -55, -10, -40, 26, -9, -25, -62, 53, -27, 8, 42, -33, -56, -11, 11, 13, 25, -11, -10, -23, 11, -11, -6, -7, -18, -74, 10, -28, 24, 19, 5, -3, 8, -46, -35, -18, -37, -9, 50, 13, -48, 51, 21, -26, 9, -20, 29, -9, 19, 8, -10, -39, 36, -7, -17, -14, 12, 8, 6, -21, 14, 23, -4, 63, -38, -25, -4, 20, -29, 17, -1, -34, -21, 26, 7, -21, -56, -7, -5, -59, 36, -48, 22, -44, -26, -22, -49, -58, 24, -5, -46, -31, 14, 7, 27, 5, 6, 12, -13, -29, 7, -18, -6, -32, 7, -6, 6, 8, -9, -49, 40, -30, 19, -13, 6, -55, -3, 36, 43, 7, 7, 28, -30, -2, 12, -20, 4, -15, -15, -34, 8, -52, -18, -45, 1, -47, 16, -16, -17, 16, -5, -10, 21, -11, -4, 26, -21, 26, 18, -21, -10, -6, 4, 9, -13, -28, 17, -20, 1, -29, 10, -4, -56, -23, 38, -9, 17, 23, -12, -48, -14, -18, 19, 7, -14, 0, -35, 31, -12, -36, -10, 6, -63, 25, -9, 19, 19, -8, -15, 19, -67, -12, -36, -24, 41, -49, 32, -7, 37, -48, 1, -24, -3, -7, 2, 29, 14, -7, -28, -34, 3, -1, -28, 18, 9, -3, -19, -41, -52, -15, 47, -7, -6, 24, -15, -11, -33, -46, 10, -34, 33, -16, -42, 4, 14, 2, 5, -12, 28, 25, -48, 16, -39, 14, 19, -36, -41, 31, -22, -6, 27, -7, -51, -18, -15, -35, 0, -34, -45, -51, -26, -19, 40, -30, 18, -12, -33, 14, 16, 12, -20, 5, 2, -21, -15, -14, 17, -39, 50, 10, -17, -26, -27, -39, 22, -39, 35, 46, 0, -5, 32, -20, -18, -27, -14, -40, 10, -7, -34, 4, -2, -38, 20, 38, -6, -24, -72, -6, -40, -27, -17, -7, -58, -55, -52, -28, -51, -12, -4, 8, -18, -1, -18, -53, -64, -10, 46, -69, -1, 22, 33, 48, 30, 28, 30, 44, -19, 24, 1, -13, -22, -43, 18, 13, 11, 5, -18, -27, 14, 4, 31, 0, -20, -39, -40, 46, 35, -19, 6, -25, 14, -20, -35, -19, -12, -19, -31, -29, 13, -26, 20, -9, 4, -4, -19, -5, -37, -41, -33, -39, 46, 5, 3, -15, -46, -4, -19, 3, -34, 21, 20, -54, -28, 19, -23, -1, -27, -65, -10, 9, 15, 8, -23, 17, -32, -1, -5, 1, -1, -30, -47, 2, -5, -9, 18, 56, -33, 20, 14, -28, -4, -39, -5, -39, 4, 20, 30, -19, -22, -47, 57, 25, -50, -15, -1, 8, -16, -59, 50, -18, 8, -20, 2, 1, -23, 45, -21, 0, 42, -31, -21, -34, -3, -8, -10, -30, -1, -20, -60, 2, 21, -15, -26, 25, -10, 42, -28, -47, 7, 20, 12, 6, -27, -55, -36, -8, 8, -26, 7, -2, 9, -46, -17, 25, -50, -29, 8, 37, -38, -3, 58, -39, -2, 31, -26, 18, -39, -27, 37, -45, 7, 50, -10, -1, -62, 29, -14, 7, 9, 19, 25, -68, -2, 38, -12, 0, 28, 38, -28, -5, 31, -38, -15, 15, -3, 14, -26, 2, -6, 6, 2, 15, 3, 14, -21, 45, -28, -8, 18, 18, 29, 22, -33, 10, 25, 23, 41, -30, 18, -31, 42, -8, 11, 0, 25, -6, -30, 0, 34, 36, 21, 27, 18, -39, -8, 42, 33, -8, 41, -20, 44, -9, 0, -9, -15, 15, 7, 15, -48, -34, 65, -7, -13, 66, -33, -13}

#define TENSOR_DENSE_KERNEL_0_DEC_BITS {8}

#define TENSOR_DENSE_BIAS_0 {38, 1, -22, -48, 19, 5, -20, -86, -49, 20, -49, -48, 127}

#define TENSOR_DENSE_BIAS_0_DEC_BITS {10}

#define DENSE_BIAS_LSHIFT {0}

#define DENSE_OUTPUT_RSHIFT {8}


/* output q format for each layer */
#define INPUT_1_OUTPUT_DEC 4
#define INPUT_1_OUTPUT_OFFSET 0
#define CONV1D_OUTPUT_DEC 3
#define CONV1D_OUTPUT_OFFSET 0
#define LEAKY_RE_LU_OUTPUT_DEC 3
#define LEAKY_RE_LU_OUTPUT_OFFSET 0
#define CONV1D_1_OUTPUT_DEC 2
#define CONV1D_1_OUTPUT_OFFSET 0
#define LEAKY_RE_LU_1_OUTPUT_DEC 2
#define LEAKY_RE_LU_1_OUTPUT_OFFSET 0
#define FLATTEN_OUTPUT_DEC 2
#define FLATTEN_OUTPUT_OFFSET 0
#define DENSE_OUTPUT_DEC 2
#define DENSE_OUTPUT_OFFSET 0
#define DROPOUT_OUTPUT_DEC 2
#define DROPOUT_OUTPUT_OFFSET 0
#define SOFTMAX_OUTPUT_DEC 7
#define SOFTMAX_OUTPUT_OFFSET 0

/* bias shift and output shift for none-weighted layer */

/* tensors and configurations for each layer */
static int8_t nnom_input_data[450] = {0};

const nnom_shape_data_t tensor_input_1_dim[] = {150, 3};
const nnom_qformat_param_t tensor_input_1_dec[] = {4};
const nnom_qformat_param_t tensor_input_1_offset[] = {0};
const nnom_tensor_t tensor_input_1 = {
    .p_data = (void*)nnom_input_data,
    .dim = (nnom_shape_data_t*)tensor_input_1_dim,
    .q_dec = (nnom_qformat_param_t*)tensor_input_1_dec,
    .q_offset = (nnom_qformat_param_t*)tensor_input_1_offset,
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .num_dim = 2,
    .bitwidth = 8
};

const nnom_io_config_t input_1_config = {
    .super = {.name = "input_1"},
    .tensor = (nnom_tensor_t*)&tensor_input_1
};
const int8_t tensor_conv1d_kernel_0_data[] = TENSOR_CONV1D_KERNEL_0;

const nnom_shape_data_t tensor_conv1d_kernel_0_dim[] = {3, 3, 30};
const nnom_qformat_param_t tensor_conv1d_kernel_0_dec[] = TENSOR_CONV1D_KERNEL_0_DEC_BITS;
const nnom_qformat_param_t tensor_conv1d_kernel_0_offset[] = {0};
const nnom_tensor_t tensor_conv1d_kernel_0 = {
    .p_data = (void*)tensor_conv1d_kernel_0_data,
    .dim = (nnom_shape_data_t*)tensor_conv1d_kernel_0_dim,
    .q_dec = (nnom_qformat_param_t*)tensor_conv1d_kernel_0_dec,
    .q_offset = (nnom_qformat_param_t*)tensor_conv1d_kernel_0_offset,
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .num_dim = 3,
    .bitwidth = 8
};
const int8_t tensor_conv1d_bias_0_data[] = TENSOR_CONV1D_BIAS_0;

const nnom_shape_data_t tensor_conv1d_bias_0_dim[] = {30};
const nnom_qformat_param_t tensor_conv1d_bias_0_dec[] = TENSOR_CONV1D_BIAS_0_DEC_BITS;
const nnom_qformat_param_t tensor_conv1d_bias_0_offset[] = {0};
const nnom_tensor_t tensor_conv1d_bias_0 = {
    .p_data = (void*)tensor_conv1d_bias_0_data,
    .dim = (nnom_shape_data_t*)tensor_conv1d_bias_0_dim,
    .q_dec = (nnom_qformat_param_t*)tensor_conv1d_bias_0_dec,
    .q_offset = (nnom_qformat_param_t*)tensor_conv1d_bias_0_offset,
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .num_dim = 1,
    .bitwidth = 8
};

const nnom_qformat_param_t conv1d_output_shift[] = CONV1D_OUTPUT_RSHIFT;
const nnom_qformat_param_t conv1d_bias_shift[] = CONV1D_BIAS_LSHIFT;
const nnom_conv2d_config_t conv1d_config = {
    .super = {.name = "conv1d"},
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .weight = (nnom_tensor_t*)&tensor_conv1d_kernel_0,
    .bias = (nnom_tensor_t*)&tensor_conv1d_bias_0,
    .output_shift = (nnom_qformat_param_t *)&conv1d_output_shift, 
    .bias_shift = (nnom_qformat_param_t *)&conv1d_bias_shift, 
    .filter_size = 30,
    .kernel_size = {3},
    .stride_size = {3},
    .padding_size = {0, 0},
    .dilation_size = {1},
    .padding_type = PADDING_SAME
};
const int8_t tensor_conv1d_1_kernel_0_data[] = TENSOR_CONV1D_1_KERNEL_0;

const nnom_shape_data_t tensor_conv1d_1_kernel_0_dim[] = {3, 30, 15};
const nnom_qformat_param_t tensor_conv1d_1_kernel_0_dec[] = TENSOR_CONV1D_1_KERNEL_0_DEC_BITS;
const nnom_qformat_param_t tensor_conv1d_1_kernel_0_offset[] = {0};
const nnom_tensor_t tensor_conv1d_1_kernel_0 = {
    .p_data = (void*)tensor_conv1d_1_kernel_0_data,
    .dim = (nnom_shape_data_t*)tensor_conv1d_1_kernel_0_dim,
    .q_dec = (nnom_qformat_param_t*)tensor_conv1d_1_kernel_0_dec,
    .q_offset = (nnom_qformat_param_t*)tensor_conv1d_1_kernel_0_offset,
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .num_dim = 3,
    .bitwidth = 8
};
const int8_t tensor_conv1d_1_bias_0_data[] = TENSOR_CONV1D_1_BIAS_0;

const nnom_shape_data_t tensor_conv1d_1_bias_0_dim[] = {15};
const nnom_qformat_param_t tensor_conv1d_1_bias_0_dec[] = TENSOR_CONV1D_1_BIAS_0_DEC_BITS;
const nnom_qformat_param_t tensor_conv1d_1_bias_0_offset[] = {0};
const nnom_tensor_t tensor_conv1d_1_bias_0 = {
    .p_data = (void*)tensor_conv1d_1_bias_0_data,
    .dim = (nnom_shape_data_t*)tensor_conv1d_1_bias_0_dim,
    .q_dec = (nnom_qformat_param_t*)tensor_conv1d_1_bias_0_dec,
    .q_offset = (nnom_qformat_param_t*)tensor_conv1d_1_bias_0_offset,
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .num_dim = 1,
    .bitwidth = 8
};

const nnom_qformat_param_t conv1d_1_output_shift[] = CONV1D_1_OUTPUT_RSHIFT;
const nnom_qformat_param_t conv1d_1_bias_shift[] = CONV1D_1_BIAS_LSHIFT;
const nnom_conv2d_config_t conv1d_1_config = {
    .super = {.name = "conv1d_1"},
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .weight = (nnom_tensor_t*)&tensor_conv1d_1_kernel_0,
    .bias = (nnom_tensor_t*)&tensor_conv1d_1_bias_0,
    .output_shift = (nnom_qformat_param_t *)&conv1d_1_output_shift, 
    .bias_shift = (nnom_qformat_param_t *)&conv1d_1_bias_shift, 
    .filter_size = 15,
    .kernel_size = {3},
    .stride_size = {3},
    .padding_size = {0, 0},
    .dilation_size = {1},
    .padding_type = PADDING_SAME
};

const nnom_flatten_config_t flatten_config = {
    .super = {.name = "flatten"}
};
const int8_t tensor_dense_kernel_0_data[] = TENSOR_DENSE_KERNEL_0;

const nnom_shape_data_t tensor_dense_kernel_0_dim[] = {255, 13};
const nnom_qformat_param_t tensor_dense_kernel_0_dec[] = TENSOR_DENSE_KERNEL_0_DEC_BITS;
const nnom_qformat_param_t tensor_dense_kernel_0_offset[] = {0};
const nnom_tensor_t tensor_dense_kernel_0 = {
    .p_data = (void*)tensor_dense_kernel_0_data,
    .dim = (nnom_shape_data_t*)tensor_dense_kernel_0_dim,
    .q_dec = (nnom_qformat_param_t*)tensor_dense_kernel_0_dec,
    .q_offset = (nnom_qformat_param_t*)tensor_dense_kernel_0_offset,
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .num_dim = 2,
    .bitwidth = 8
};
const int8_t tensor_dense_bias_0_data[] = TENSOR_DENSE_BIAS_0;

const nnom_shape_data_t tensor_dense_bias_0_dim[] = {13};
const nnom_qformat_param_t tensor_dense_bias_0_dec[] = TENSOR_DENSE_BIAS_0_DEC_BITS;
const nnom_qformat_param_t tensor_dense_bias_0_offset[] = {0};
const nnom_tensor_t tensor_dense_bias_0 = {
    .p_data = (void*)tensor_dense_bias_0_data,
    .dim = (nnom_shape_data_t*)tensor_dense_bias_0_dim,
    .q_dec = (nnom_qformat_param_t*)tensor_dense_bias_0_dec,
    .q_offset = (nnom_qformat_param_t*)tensor_dense_bias_0_offset,
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .num_dim = 1,
    .bitwidth = 8
};

const nnom_qformat_param_t dense_output_shift[] = DENSE_OUTPUT_RSHIFT;
const nnom_qformat_param_t dense_bias_shift[] = DENSE_BIAS_LSHIFT;
const nnom_dense_config_t dense_config = {
    .super = {.name = "dense"},
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .weight = (nnom_tensor_t*)&tensor_dense_kernel_0,
    .bias = (nnom_tensor_t*)&tensor_dense_bias_0,
    .output_shift = (nnom_qformat_param_t *)&dense_output_shift,
    .bias_shift = (nnom_qformat_param_t *)&dense_bias_shift
};

const nnom_softmax_config_t softmax_config = {
    .super = {.name = "softmax"}
};
static int8_t nnom_output_data[13] = {0};

const nnom_shape_data_t tensor_output0_dim[] = {13};
const nnom_qformat_param_t tensor_output0_dec[] = {SOFTMAX_OUTPUT_DEC};
const nnom_qformat_param_t tensor_output0_offset[] = {0};
const nnom_tensor_t tensor_output0 = {
    .p_data = (void*)nnom_output_data,
    .dim = (nnom_shape_data_t*)tensor_output0_dim,
    .q_dec = (nnom_qformat_param_t*)tensor_output0_dec,
    .q_offset = (nnom_qformat_param_t*)tensor_output0_offset,
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .num_dim = 1,
    .bitwidth = 8
};

const nnom_io_config_t output0_config = {
    .super = {.name = "output0"},
    .tensor = (nnom_tensor_t*)&tensor_output0
};
/* model version */
#define NNOM_MODEL_VERSION (10000*0 + 100*4 + 3)

/* nnom model */
static nnom_model_t* nnom_model_create(void)
{
	static nnom_model_t model;
	nnom_layer_t* layer[9];

	check_model_version(NNOM_MODEL_VERSION);
	new_model(&model);

	layer[0] = input_s(&input_1_config);
	layer[1] = model.hook(conv2d_s(&conv1d_config), layer[0]);
	layer[2] = model.active(act_leaky_relu(0.300000f), layer[1]);
	layer[3] = model.hook(conv2d_s(&conv1d_1_config), layer[2]);
	layer[4] = model.active(act_leaky_relu(0.300000f), layer[3]);
	layer[5] = model.hook(flatten_s(&flatten_config), layer[4]);
	layer[6] = model.hook(dense_s(&dense_config), layer[5]);
	layer[7] = model.hook(softmax_s(&softmax_config), layer[6]);
	layer[8] = model.hook(output_s(&output0_config), layer[7]);
	model_compile(&model, layer[0], layer[8]);
	return &model;
}
