#include "nnom.h"

// New comment
/* Weights, bias and Q format */
#define TENSOR_CONV1D_KERNEL_0 {-86, 11, -54, -60, 34, -40, -83, 64, -57, 58, 39, -65, -31, -41, -80, 56, 36, -81, 33, 21, -18, -18, -5, 69, 24, 51, 83, -80, -27, -88, -74, -36, -41, -59, -36, -86, -20, 33, 6, 56, 90, -58, 36, 75, -79, 14, -17, -23, -51, 40, -63, 45, -15, -84, 29, -38, 22, 35, -82, -63, -37, -63, -16, -60, -10, 22, -2, 20, 75, -57, -15, 93, -23, 58, -38, -16, -16, -7, 5, -23, -80, -15, -16, 29, -60, -80, 42, 13, -26, -28, 61, 61, 26, 33, 33, 78, -14, -25, 30, 11, 25, 8, 13, 48, 94, 57, -24, 32, -80, -31, 24, -24, -39, 39, -43, -61, 20, 87, 5, -63, 84, 62, -15, 32, 60, 27, 51, 12, -6, 63, 26, -61, 63, -54, 7, -31, -81, 69, 32, 0, -20, -34, -1, -7, 77, -8, -50, 79, -56, -69, 97, 15, -56, 84, -34, 5, 40, 66, 41, 58, 56, 90, -39, -36, -23, -69, -61, -32, -77, -71, -4, 18, -33, 31, 32, 42, -25, -42, -67, -54, -39, 72, -30, 9, 41, -68, 18, 55, 11, 58, -18, -40, 68, 26, 1, -10, 15, 11, 29, 52, 86, 50, 48, 16, 17, 3, 63, -6, -2, 19, -79, 15, 4, 26, 68, 89, 71, -45, -54, 65, -63, -19, 17, 24, 37, 48, 63, 69, -7, -44, 51, 58, -54, 28, 37, -22, -6, 25, -92, -12, 34, -87, -53, 46, -18, 3, 96, -7, 65, 83, 0, 66, -15, -31, -1, -39, 26, -60, 54, -53, -81, 71, -32, 58, 86, -5, -38, 50, 41, -12}

#define TENSOR_CONV1D_KERNEL_0_DEC_BITS {8}

#define TENSOR_CONV1D_BIAS_0 {-37, 47, -18, -37, 79, -30, 57, 66, -32, 42, 64, -11, 86, 24, -23, 76, 19, 20, 79, -14, 12, 22, -15, 93, 51, 57, 65, -37, -8, -35}

#define TENSOR_CONV1D_BIAS_0_DEC_BITS {9}

#define CONV1D_BIAS_LSHIFT {3}

#define CONV1D_OUTPUT_RSHIFT {9}

#define TENSOR_CONV1D_1_KERNEL_0 {-7, -8, 26, 51, -10, 5, -29, 18, 30, -38, -25, 21, 63, 38, 29, -38, -40, 31, 5, 1, -39, -54, -55, -5, 30, 28, -41, -65, 30, -7, 70, -43, -42, 34, 39, 66, -43, -41, 2, 20, -22, 22, 57, -28, 3, -2, 18, -53, 29, -37, -38, 20, -40, 24, 27, 12, 20, -13, 31, -3, 60, -33, 3, 59, -61, 36, -3, 47, 20, 51, -53, -16, 23, -8, -45, -42, 10, -61, -17, -11, -14, -9, -26, -34, -15, -39, -45, -33, -14, -63, -23, 53, 17, -19, 23, -2, -30, -48, 61, 34, 21, 22, 2, -33, 16, -6, -49, -57, 61, 44, -8, -5, 29, 30, -5, -46, 40, -45, -24, -62, 57, -3, 5, 71, -16, 18, -3, -30, 23, -34, 37, -52, -57, -36, -26, 16, -8, 36, 33, -9, -29, -53, 28, 3, -41, -54, -54, -52, 48, -49, 53, 15, 2, 1, 23, 76, -17, -68, 45, 25, -6, -41, -58, -46, -3, 36, 19, -16, 34, 51, -9, -16, -16, -31, 13, 8, 36, -47, 52, -38, 23, -46, -32, 64, 17, 41, -39, -10, 22, 48, 9, 40, -13, 35, 31, -34, 19, 53, 41, -50, 24, 38, 21, -1, -17, 67, 12, 62, 6, 47, 54, -58, 31, 49, 17, -43, 45, -66, 25, -34, 54, 57, 2, 3, -20, -55, 47, 37, -44, -46, -43, 63, 4, -38, 23, 7, -14, 28, -13, 80, -23, 11, 4, 48, -46, -30, 4, -20, -46, 38, 25, 35, 4, -4, 6, -61, -32, 25, -7, 18, 50, 59, -23, 3, -9, -25, -4, -6, -10, -16, 62, -28, -11, 46, 44, -4, -18, 0, 51, 28, -20, 60, 47, 19, -55, -36, -38, -26, 51, 31, 28, 38, 53, -12, -66, 35, 13, -20, 59, 14, 2, 19, 57, -21, 16, -15, 35, 48, 58, 44, -27, 17, 24, -68, -44, 24, -54, -10, -30, -60, -24, -54, 26, 3, -34, 14, -43, 45, 1, -51, 66, 19, 18, 27, 51, 32, -32, 56, 1, 45, -35, 63, -21, -36, 22, -50, -44, 30, 37, -39, 37, -36, -2, -8, -70, 42, 16, -27, 63, -72, -58, -26, -39, 48, 18, 43, 15, -18, -12, 22, -22, 58, 17, -5, 32, 58, 45, -19, -17, 38, 31, 40, 46, -41, 47, 42, -12, 61, -9, -2, -55, 27, 33, -47, -16, 57, 70, 19, 21, 20, 2, -68, 58, 63, -28, 2, 74, 48, 41, 52, 37, 43, -57, -59, -13, 44, 50, -45, 26, 42, -6, 0, -44, -15, 21, -25, 59, 3, 34, -10, -44, -41, 43, -11, -36, -24, -9, 10, 53, 49, 58, -4, -45, -7, 62, -13, 47, -44, 42, -11, 59, -56, -23, 55, -28, 8, 7, 33, 36, 31, 46, -24, 47, 5, -61, 18, -53, 32, 38, 2, -23, -34, 3, 17, 18, 39, -3, -53, 8, -49, 22, 24, 7, 27, -35, 28, -31, 45, -46, 44, -6, 27, 26, -57, 25, 63, -56, -6, 38, -21, -24, -4, 30, 69, -11, 16, 43, 35, -33, -47, 9, 9, -5, 35, 47, -15, -35, -25, 22, 19, 66, -20, 42, 55, -45, 60, -31, 45, -27, -30, -3, 25, -16, 13, 49, -32, -26, 67, 42, -21, -69, 20, -23, -50, -7, -54, 16, 3, -42, -1, -50, -62, 78, -16, 7, 17, -6, -27, 35, -7, -9, 6, -38, 94, 19, -42, 60, -84, -5, -60, -55, -17, -12, -34, 59, -74, 40, 60, -56, 76, 58, -41, 88, -15, -22, 68, 5, -73, 38, 7, 37, -36, -53, 15, -5, -12, 35, -16, -29, -59, 6, 26, -25, -46, 68, 14, 44, 63, -74, 26, 66, -36, 64, -42, -71, 83, -28, 31, 36, -51, 27, -26, 32, 91, 16, 63, -37, -48, -26, -67, -25, -50, -30, -5, -52, 18, 73, -22, 45, 77, 33, -36, 74, -56, 13, 24, -29, -37, 68, 36, -65, -28, -25, 13, 40, -14, 34, -5, -27, 21, -25, 61, -28, 68, -11, 12, 23, 33, -7, 19, 23, 16, 26, 36, 19, 50, -16, -6, 30, 57, -59, 25, -9, 25, 67, 29, 58, 33, -12, 15, 5, 34, -34, 12, 12, -39, 75, -42, -32, -3, -25, 17, 26, 32, -9, 82, 45, 19, 70, 2, 13, 73, -58, 41, 31, 5, 42, -47, -26, 62, 56, -11, 7, 30, 20, -46, 26, -15, 42, 52, -36, -3, 29, 48, 54, -31, 60, 40, 53, -55, 35, -10, 27, -28, -4, -11, 36, 27, -67, 45, 53, 7, 17, 11, 40, -46, 12, 27, 59, -20, -12, -36, -35, 35, 49, 0, -32, 52, -12, -2, 14, 38, -28, -34, 46, 43, -57, 59, -34, 59, 67, -31, 15, 56, -10, 11, 4, -45, 57, 26, -1, -44, -13, 30, 57, -3, -28, -43, 11, -2, 27, -32, -20, 32, -25, 50, 0, 48, 19, 44, -19, 70, -45, 5, 61, -20, -21, 17, -30, 26, -26, -37, -67, 79, 45, -42, 75, 24, -21, -42, 4, 70, 0, -9, 80, -9, 63, -31, -14, -16, -68, 40, -59, 31, 79, 57, 57, -80, 10, -22, 30, 6, -25, 70, 88, 18, 33, 3, 0, 26, 37, -8, -28, 21, 2, 15, -18, 24, 35, 5, 0, -22, 29, -23, 30, -26, 8, -35, 35, -14, -2, 41, 19, 85, 93, 48, 59, 26, -64, 29, -25, 8, 18, -46, 69, 8, 67, 27, -24, 49, 67, 63, 10, 34, 8, 64, -29, -33, 64, 8, -12, 1, -57, 35, 59, 0, -13, -10, -13, 43, 36, 25, -44, -59, -10, -23, 46, -11, 19, 39, 44, -5, -47, 24, 25, 53, 8, -35, 32, 9, -70, -3, 38, -2, 24, -74, 53, -25, 2, 54, 57, 4, -11, -39, -42, -4, -15, 4, -20, 32, 27, 73, -4, 65, -11, 37, -24, -33, 26, -21, -26, 5, -6, -29, -7, -67, 20, -60, 41, 33, 4, -25, 32, -42, 53, -70, 4, -36, 55, -43, -41, 20, -60, -36, 94, 54, -13, -63, 76, -65, 36, -69, 5, 68, 29, -27, 23, -62, 19, 23, 51, 51, -23, -6, -42, 35, -17, -19, 54, -9, 0, 20, -31, 3, 72, 69, 76, -70, 48, 46, -50, -13, -57, -37, 63, 39, -9, 8, -31, 37, -11, -2, -56, -44, 9, 15, 49, -59, 13, -33, -46, 76, -10, -11, 67, 28, 37, -45, 54, 35, 33, -34, -38, 15, -8, 41, 59, -54, 9, 64, -32, 61, -28, -41, -8, -29, -24, -27, 47, 24, -23, -38, 81, -19, 55, 29, 26, 30, 13, 0, 90, 95, 23, 7, 29, 84, -18, 86, -54, 12, 20, -2, 2, 87, -7, 78, -58, -17, 36, 48, 43, -35, 37, -26, -13, -46, -61, 72, -53, 14, 85, 16, 34, -28, -21, 9, 10, 70, -14, -32, 6, -3, 35, 62, 53, 32, 13, 58, -57, 16, 36, -4, 5, -50, 61, -67, -69, 74, -7, 6, 75, 93, -23, 60, -45, -11, 5, 46, -44, -22, -13, 55, 9, 63, -32, 78, -30, -7, -27, 57, 68, 14, -29, 19, 17, 53, -18, -46, -16, -26, 34, -29, -23, -25, -22, -9, 71, -18, -44, -22, 76, 48, -39, -61, -37, -52, -44, -61, 18, -49, -27, 45, -4, 48, 93, 17, 27, -16, 23, -59, -58, -45, -14, 15, -19, 1, 61, 6, -1, -25, 72, 17, -2, -8, -39, -57, -38, 7, 13, -61, -30, 74, 35, 29, 81, 5, -39, 10, -8, -69, 9, -22, -26, 39, -43, 0, -31, -57, 11, -41, -6, -29, -56, 45, 1, 2, 20, -69, -12, -27, 48, -15, -53, 18, -5, 75, 56, -36, 77, -6, -37, -26, -35, 20, -5, -55, 45, 36, -24, 45, -33, -6, -46, -66, -16, -48, -32, 17, 2, 36, 39, 68, 18, 28, -3, 28, -12, -54, 62, 7, -20, -4, -6, -48, 23, -33, 72, -6, 44, 2, -7, 31, -37, -88, 54, 38, 67, 54, 78, -38, -13, 45, -54, 24, -21, 24, 72, 17, 1, 13, 0, -36, 19, -52, 40, 6, 12, 6, -34, 38, 28, -46, -29, -80, 62, -9, 31, 0, 11, -19}

#define TENSOR_CONV1D_1_KERNEL_0_DEC_BITS {8}

#define TENSOR_CONV1D_1_BIAS_0 {-15, 1, -9, 23, 7, 34, 73, 44, -8, 28, -47, 36, 47, 39, -26}

#define TENSOR_CONV1D_1_BIAS_0_DEC_BITS {9}

#define CONV1D_1_BIAS_LSHIFT {2}

#define CONV1D_1_OUTPUT_RSHIFT {9}

#define TENSOR_DENSE_KERNEL_0 {}

#define TENSOR_DENSE_KERNEL_0_DEC_BITS {8}

#define TENSOR_DENSE_BIAS_0 {-9, 10, -10, -13, 51, -49, 1, -71, -54, -15, -67, -40, 86}

#define TENSOR_DENSE_BIAS_0_DEC_BITS {10}

#define DENSE_BIAS_LSHIFT {0}

#define DENSE_OUTPUT_RSHIFT {8}


/* output q format for each layer */
#define INPUT_1_OUTPUT_DEC 4
#define INPUT_1_OUTPUT_OFFSET 0
#define CONV1D_OUTPUT_DEC 3
#define CONV1D_OUTPUT_OFFSET 0
#define LEAKY_RE_LU_OUTPUT_DEC 3
#define LEAKY_RE_LU_OUTPUT_OFFSET 0
#define CONV1D_1_OUTPUT_DEC 2
#define CONV1D_1_OUTPUT_OFFSET 0
#define LEAKY_RE_LU_1_OUTPUT_DEC 2
#define LEAKY_RE_LU_1_OUTPUT_OFFSET 0
#define FLATTEN_OUTPUT_DEC 2
#define FLATTEN_OUTPUT_OFFSET 0
#define DENSE_OUTPUT_DEC 2
#define DENSE_OUTPUT_OFFSET 0
#define DROPOUT_OUTPUT_DEC 2
#define DROPOUT_OUTPUT_OFFSET 0
#define SOFTMAX_OUTPUT_DEC 7
#define SOFTMAX_OUTPUT_OFFSET 0

/* bias shift and output shift for none-weighted layer */

/* tensors and configurations for each layer */
static int8_t nnom_input_data[450] = {0};

const nnom_shape_data_t tensor_input_1_dim[] = {150, 3};
const nnom_qformat_param_t tensor_input_1_dec[] = {4};
const nnom_qformat_param_t tensor_input_1_offset[] = {0};
const nnom_tensor_t tensor_input_1 = {
    .p_data = (void*)nnom_input_data,
    .dim = (nnom_shape_data_t*)tensor_input_1_dim,
    .q_dec = (nnom_qformat_param_t*)tensor_input_1_dec,
    .q_offset = (nnom_qformat_param_t*)tensor_input_1_offset,
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .num_dim = 2,
    .bitwidth = 8
};

const nnom_io_config_t input_1_config = {
    .super = {.name = "input_1"},
    .tensor = (nnom_tensor_t*)&tensor_input_1
};
const int8_t tensor_conv1d_kernel_0_data[] = TENSOR_CONV1D_KERNEL_0;

const nnom_shape_data_t tensor_conv1d_kernel_0_dim[] = {3, 3, 30};
const nnom_qformat_param_t tensor_conv1d_kernel_0_dec[] = TENSOR_CONV1D_KERNEL_0_DEC_BITS;
const nnom_qformat_param_t tensor_conv1d_kernel_0_offset[] = {0};
const nnom_tensor_t tensor_conv1d_kernel_0 = {
    .p_data = (void*)tensor_conv1d_kernel_0_data,
    .dim = (nnom_shape_data_t*)tensor_conv1d_kernel_0_dim,
    .q_dec = (nnom_qformat_param_t*)tensor_conv1d_kernel_0_dec,
    .q_offset = (nnom_qformat_param_t*)tensor_conv1d_kernel_0_offset,
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .num_dim = 3,
    .bitwidth = 8
};
const int8_t tensor_conv1d_bias_0_data[] = TENSOR_CONV1D_BIAS_0;

const nnom_shape_data_t tensor_conv1d_bias_0_dim[] = {30};
const nnom_qformat_param_t tensor_conv1d_bias_0_dec[] = TENSOR_CONV1D_BIAS_0_DEC_BITS;
const nnom_qformat_param_t tensor_conv1d_bias_0_offset[] = {0};
const nnom_tensor_t tensor_conv1d_bias_0 = {
    .p_data = (void*)tensor_conv1d_bias_0_data,
    .dim = (nnom_shape_data_t*)tensor_conv1d_bias_0_dim,
    .q_dec = (nnom_qformat_param_t*)tensor_conv1d_bias_0_dec,
    .q_offset = (nnom_qformat_param_t*)tensor_conv1d_bias_0_offset,
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .num_dim = 1,
    .bitwidth = 8
};

const nnom_qformat_param_t conv1d_output_shift[] = CONV1D_OUTPUT_RSHIFT;
const nnom_qformat_param_t conv1d_bias_shift[] = CONV1D_BIAS_LSHIFT;
const nnom_conv2d_config_t conv1d_config = {
    .super = {.name = "conv1d"},
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .weight = (nnom_tensor_t*)&tensor_conv1d_kernel_0,
    .bias = (nnom_tensor_t*)&tensor_conv1d_bias_0,
    .output_shift = (nnom_qformat_param_t *)&conv1d_output_shift, 
    .bias_shift = (nnom_qformat_param_t *)&conv1d_bias_shift, 
    .filter_size = 30,
    .kernel_size = {3},
    .stride_size = {3},
    .padding_size = {0, 0},
    .dilation_size = {1},
    .padding_type = PADDING_SAME
};
const int8_t tensor_conv1d_1_kernel_0_data[] = TENSOR_CONV1D_1_KERNEL_0;

const nnom_shape_data_t tensor_conv1d_1_kernel_0_dim[] = {3, 30, 15};
const nnom_qformat_param_t tensor_conv1d_1_kernel_0_dec[] = TENSOR_CONV1D_1_KERNEL_0_DEC_BITS;
const nnom_qformat_param_t tensor_conv1d_1_kernel_0_offset[] = {0};
const nnom_tensor_t tensor_conv1d_1_kernel_0 = {
    .p_data = (void*)tensor_conv1d_1_kernel_0_data,
    .dim = (nnom_shape_data_t*)tensor_conv1d_1_kernel_0_dim,
    .q_dec = (nnom_qformat_param_t*)tensor_conv1d_1_kernel_0_dec,
    .q_offset = (nnom_qformat_param_t*)tensor_conv1d_1_kernel_0_offset,
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .num_dim = 3,
    .bitwidth = 8
};
const int8_t tensor_conv1d_1_bias_0_data[] = TENSOR_CONV1D_1_BIAS_0;

const nnom_shape_data_t tensor_conv1d_1_bias_0_dim[] = {15};
const nnom_qformat_param_t tensor_conv1d_1_bias_0_dec[] = TENSOR_CONV1D_1_BIAS_0_DEC_BITS;
const nnom_qformat_param_t tensor_conv1d_1_bias_0_offset[] = {0};
const nnom_tensor_t tensor_conv1d_1_bias_0 = {
    .p_data = (void*)tensor_conv1d_1_bias_0_data,
    .dim = (nnom_shape_data_t*)tensor_conv1d_1_bias_0_dim,
    .q_dec = (nnom_qformat_param_t*)tensor_conv1d_1_bias_0_dec,
    .q_offset = (nnom_qformat_param_t*)tensor_conv1d_1_bias_0_offset,
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .num_dim = 1,
    .bitwidth = 8
};

const nnom_qformat_param_t conv1d_1_output_shift[] = CONV1D_1_OUTPUT_RSHIFT;
const nnom_qformat_param_t conv1d_1_bias_shift[] = CONV1D_1_BIAS_LSHIFT;
const nnom_conv2d_config_t conv1d_1_config = {
    .super = {.name = "conv1d_1"},
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .weight = (nnom_tensor_t*)&tensor_conv1d_1_kernel_0,
    .bias = (nnom_tensor_t*)&tensor_conv1d_1_bias_0,
    .output_shift = (nnom_qformat_param_t *)&conv1d_1_output_shift, 
    .bias_shift = (nnom_qformat_param_t *)&conv1d_1_bias_shift, 
    .filter_size = 15,
    .kernel_size = {3},
    .stride_size = {3},
    .padding_size = {0, 0},
    .dilation_size = {1},
    .padding_type = PADDING_SAME
};

const nnom_flatten_config_t flatten_config = {
    .super = {.name = "flatten"}
};
const int8_t tensor_dense_kernel_0_data[] = TENSOR_DENSE_KERNEL_0;

const nnom_shape_data_t tensor_dense_kernel_0_dim[] = {255, 13};
const nnom_qformat_param_t tensor_dense_kernel_0_dec[] = TENSOR_DENSE_KERNEL_0_DEC_BITS;
const nnom_qformat_param_t tensor_dense_kernel_0_offset[] = {0};
const nnom_tensor_t tensor_dense_kernel_0 = {
    .p_data = (void*)tensor_dense_kernel_0_data,
    .dim = (nnom_shape_data_t*)tensor_dense_kernel_0_dim,
    .q_dec = (nnom_qformat_param_t*)tensor_dense_kernel_0_dec,
    .q_offset = (nnom_qformat_param_t*)tensor_dense_kernel_0_offset,
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .num_dim = 2,
    .bitwidth = 8
};
const int8_t tensor_dense_bias_0_data[] = TENSOR_DENSE_BIAS_0;

const nnom_shape_data_t tensor_dense_bias_0_dim[] = {13};
const nnom_qformat_param_t tensor_dense_bias_0_dec[] = TENSOR_DENSE_BIAS_0_DEC_BITS;
const nnom_qformat_param_t tensor_dense_bias_0_offset[] = {0};
const nnom_tensor_t tensor_dense_bias_0 = {
    .p_data = (void*)tensor_dense_bias_0_data,
    .dim = (nnom_shape_data_t*)tensor_dense_bias_0_dim,
    .q_dec = (nnom_qformat_param_t*)tensor_dense_bias_0_dec,
    .q_offset = (nnom_qformat_param_t*)tensor_dense_bias_0_offset,
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .num_dim = 1,
    .bitwidth = 8
};

const nnom_qformat_param_t dense_output_shift[] = DENSE_OUTPUT_RSHIFT;
const nnom_qformat_param_t dense_bias_shift[] = DENSE_BIAS_LSHIFT;
const nnom_dense_config_t dense_config = {
    .super = {.name = "dense"},
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .weight = (nnom_tensor_t*)&tensor_dense_kernel_0,
    .bias = (nnom_tensor_t*)&tensor_dense_bias_0,
    .output_shift = (nnom_qformat_param_t *)&dense_output_shift,
    .bias_shift = (nnom_qformat_param_t *)&dense_bias_shift
};

const nnom_softmax_config_t softmax_config = {
    .super = {.name = "softmax"}
};
static int8_t nnom_output_data[13] = {0};

const nnom_shape_data_t tensor_output0_dim[] = {13};
const nnom_qformat_param_t tensor_output0_dec[] = {SOFTMAX_OUTPUT_DEC};
const nnom_qformat_param_t tensor_output0_offset[] = {0};
const nnom_tensor_t tensor_output0 = {
    .p_data = (void*)nnom_output_data,
    .dim = (nnom_shape_data_t*)tensor_output0_dim,
    .q_dec = (nnom_qformat_param_t*)tensor_output0_dec,
    .q_offset = (nnom_qformat_param_t*)tensor_output0_offset,
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .num_dim = 1,
    .bitwidth = 8
};

const nnom_io_config_t output0_config = {
    .super = {.name = "output0"},
    .tensor = (nnom_tensor_t*)&tensor_output0
};
/* model version */
#define NNOM_MODEL_VERSION (10000*0 + 100*4 + 3)

/* nnom model */
static nnom_model_t* nnom_model_create(void)
{
	static nnom_model_t model;
	nnom_layer_t* layer[9];

	check_model_version(NNOM_MODEL_VERSION);
	new_model(&model);

	layer[0] = input_s(&input_1_config);
	layer[1] = model.hook(conv2d_s(&conv1d_config), layer[0]);
	layer[2] = model.active(act_leaky_relu(0.300000f), layer[1]);
	layer[3] = model.hook(conv2d_s(&conv1d_1_config), layer[2]);
	layer[4] = model.active(act_leaky_relu(0.300000f), layer[3]);
	layer[5] = model.hook(flatten_s(&flatten_config), layer[4]);
	layer[6] = model.hook(dense_s(&dense_config), layer[5]);
	layer[7] = model.hook(softmax_s(&softmax_config), layer[6]);
	layer[8] = model.hook(output_s(&output0_config), layer[7]);
	model_compile(&model, layer[0], layer[8]);
	return &model;
}
